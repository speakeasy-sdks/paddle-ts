/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export class Transactions extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a transaction
     *
     * @remarks
     * Creates a new transaction.
     *
     * Transactions are typically created with the status of `draft` or `ready` initially:
     *
     * * Draft transactions have `items` against them, but don't have all of the required fields for billing. Paddle creates draft transactions automatically when a checkout is opened.
     * * Paddle automatically marks transactions as `ready` when all of the required fields are present for billing. This includes `customer_id` and `address_id` for automatically-collected transactions, and `billing_details` for manually-collected transactions.
     *
     * The `collection_mode` against a transaction determines how Paddle tries to collect for payment:
     *
     * * Manually-collected transactions are for sales-assisted billing. Paddle sends an invoice to your customer when a transaction is `billed`. Payment is often by wire transfer.
     * * Automatically-collected transactions are for self-serve checkouts. Paddle tries to collect using a payment method on file, or you may pass the transaction to a checkout to collect for payment.
     *
     * When a manually-collected transaction is marked as `billed` or an automatically-collected transaction is `completed`, Paddle automatically creates a related subscription for the items on the transaction.
     *
     * If successful, your response includes a copy of the new transaction entity.
     *
     * Use the `include` parameter to include related entities in the response.
     */
    async create(
        input: operations.CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$["transaction-create"], { explode: true });

        const path$ = this.templateURLComponent("/transactions")();

        const query$ = [
            enc$.encodeForm("include", payload$.include, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateTransactionResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateTransactionTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a transaction
     *
     * @remarks
     * Returns a transaction using its ID.
     *
     * Use the `include` parameter to include related entities in the response.
     */
    async get(
        input: operations.GetTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTransactionRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            transaction_id: enc$.encodeSimple("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/transactions/{transaction_id}")(pathParams$);

        const query$ = [
            enc$.encodeForm("include", payload$.include, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetTransactionResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetTransactionTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetTransactionTransactionsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a PDF invoice for a transaction
     *
     * @remarks
     * Returns a link to an invoice PDF for a transaction.
     *
     * Invoice PDFs are created for both automatically and manually-collected transactions.
     *
     * * The PDF for manually-collected transactions includes payment terms, purchase order number, and notes for your customer. It's a demand for payment from your customer.
     * * The PDF for automatically-collected transactions lets your customer know that payment was taken successfully. Customers may require this for for tax-reporting purposes.
     *
     * The link returned is not a permanent link. It expires at the date and time returned in the `Expires` header.
     */
    async getInvoice(
        input: operations.GetTransactionInvoiceRequest,
        options?: RequestOptions
    ): Promise<operations.GetTransactionInvoiceResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetTransactionInvoiceRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            transaction_id: enc$.encodeSimple("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/transactions/{transaction_id}/invoice")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetTransactionInvoiceResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetTransactionInvoiceResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetTransactionInvoiceTransactionsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetTransactionInvoiceTransactionsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List transactions
     *
     * @remarks
     * Returns a paginated list of transactions. Use the query parameters to page through results.
     *
     * Use the `include` parameter to include related entities in the response.
     */
    async list(
        input: operations.ListTransactionsRequest,
        options?: RequestOptions
    ): Promise<operations.ListTransactionsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListTransactionsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/transactions")();

        const query$ = [
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("billed_at", payload$.billed_at, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("collection_mode", payload$.collection_mode, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("created_at", payload$.created_at, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("customer_id", payload$.customer_id, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("id", payload$.id, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("include", payload$.include, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("invoice_number", payload$.invoice_number, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("order_by", payload$.order_by, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("per_page", payload$.per_page, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("status", payload$.status, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("subscription_id", payload$.subscription_id, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("updated_at", payload$.updated_at, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListTransactionsResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListTransactionsTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Preview a transaction
     *
     * @remarks
     * Previews a transaction without creating a transaction entity. Typically used for creating more advanced, dynamic pricing pages where users can build their own plans.
     *
     * Consider using [the preview prices operation](/api-reference/transactions/preview-prices) for simpler pricing pages.
     *
     * You can provide location information to preview a transaction. Paddle uses this to calculate tax. You can provide one of:
     *
     * * `customer_ip_address`: Paddle fetches location using the IP address to calculate totals.
     * * `address`: Paddle uses the country and ZIP code (where supplied) to calculate totals.
     * * `customer_id`, `address_id`, `business_id`: Paddle uses existing customer data to calculate totals. Typically used for logged-in customers.
     *
     * When supplying items, you can exclude items from the total calculation using the `include_in_totals` boolean.
     *
     * By default, recurring items with trials are considered to have a zero charge when previewing. Set `ignore_trials` to `true` to ignore trial periods against prices for transaction preview calculations.
     *
     * If successful, your response includes the data you sent with a `details` object that includes totals for the supplied prices.
     *
     * Transaction previews do not create transactions, so no `id` is returned.
     */
    async previewTransaction(
        input: shared.TransactionPreviewInput | undefined,
        options?: RequestOptions
    ): Promise<operations.PreviewTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.TransactionPreviewInput$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/transactions/preview")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PreviewTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.PreviewTransactionResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.PreviewTransactionTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Preview prices
     *
     * @remarks
     * Previews calculations for one or more prices. Typically used for building pricing pages.
     *
     * You can provide location information when previewing prices. Paddle uses this to calculate tax. You can provide one of:
     *
     * * `customer_ip_address`: Paddle fetches location using the IP address to calculate totals.
     * * `address`: Paddle uses the country and ZIP code (where supplied) to calculate totals.
     * * `customer_id`, `address_id`, `business_id`: Paddle uses existing customer data to calculate totals. Typically used for logged-in customers.
     *
     * If successful, your response includes the data you sent with a `details` object that includes totals for the supplied prices.
     *
     * Each line item includes `formatted_unit_totals` and `formatted_totals` objects that return totals formatted for the country or region you're working with, including the currency symbol.
     */
    async pricePreview(
        input: shared.TransactionPricingPreview | undefined,
        options?: RequestOptions
    ): Promise<operations.PricePreviewResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.TransactionPricingPreview$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/pricing-preview")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.PricePreviewResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.PricePreviewResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.PricePreviewTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update a transaction
     *
     * @remarks
     * Updates a transaction using its ID.
     *
     * You can update transactions that are `draft` or `ready`. `billed` and `completed` transactions are considered records for tax and legal purposes, so they can't be changed. You can either:
     *
     * * Create [an adjustment](/api-reference/adjustments/overview) to record a refund or credit for a transaction.
     * * Cancel a `billed` transaction by sending a PATCH request to set `status` to `canceled`.
     *
     * The transaction `status` may only be set to `billed` or `canceled`. Other statuses are set automatically by Paddle. Set a manually-collected transaction to `billed` to mark it as finalized. This is essentially issuing an invoice. At this point, it becomes a legal record so you can't make changes to it. Paddle automatically assigns an invoice number, creates [a related subscription](/api-reference/subscriptions/overview), and sends it to your customer.
     *
     * When making changes to items on a transaction, send the complete list of items that you'd like to be on a transaction — including existing items. For each item, send an object containing `price_id` and `quantity`. Paddle responds with the full `price` object for each item. See: [Work with lists](/api-reference/about/lists)
     *
     * If successful, your response includes a copy of the updated transaction entity.
     */
    async update(
        input: operations.UpdateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateTransactionResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateTransactionRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$["transaction-update"], { explode: true });

        const pathParams$ = {
            transaction_id: enc$.encodeSimple("transaction_id", payload$.transaction_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/transactions/{transaction_id}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateTransactionResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateTransactionResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateTransactionTransactionsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateTransactionTransactionsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
