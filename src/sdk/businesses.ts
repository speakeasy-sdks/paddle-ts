/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";

export class Businesses extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a business for a customer
     *
     * @remarks
     * Creates a new business for a customer.
     *
     * If successful, your response includes a copy of the new business entity.
     */
    async create(
        input: operations.CreateBusinessRequest,
        options?: RequestOptions
    ): Promise<operations.CreateBusinessResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.CreateBusinessRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$["business-create"], { explode: true });

        const pathParams$ = {
            customer_id: enc$.encodeSimple("customer_id", payload$.customer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/customers/{customer_id}/businesses")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateBusinessResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateBusinessResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateBusinessBusinessesResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 403, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateBusinessBusinessesResponseResponseBody$.inboundSchema.parse(
                {
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                }
            );
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.CreateBusinessBusinessesResponse404ResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.CreateBusinessBusinessesResponse500ResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a business for a customer
     *
     * @remarks
     * Returns a business for a customer using its ID and related customer ID.
     */
    async get(
        input: operations.GetBusinessRequest,
        options?: RequestOptions
    ): Promise<operations.GetBusinessResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetBusinessRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            business_id: enc$.encodeSimple("business_id", payload$.business_id, {
                explode: false,
                charEncoding: "percent",
            }),
            customer_id: enc$.encodeSimple("customer_id", payload$.customer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/customers/{customer_id}/businesses/{business_id}"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetBusinessResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetBusinessResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 403, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetBusinessBusinessesResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetBusinessBusinessesResponseResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetBusinessBusinessesResponse500ResponseBody$.inboundSchema.parse(
                {
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                }
            );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List businesses for a customer
     *
     * @remarks
     * Returns a paginated list of businesses for a customer. Use the query parameters to page through results.
     *
     * By default, Paddle returns businesses that are `active`. Use the `status` query parameter to return businesses that are archived.
     */
    async list(
        input: operations.ListBusinessesRequest,
        options?: RequestOptions
    ): Promise<operations.ListBusinessesResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListBusinessesRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            customer_id: enc$.encodeSimple("customer_id", payload$.customer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/customers/{customer_id}/businesses")(pathParams$);

        const query$ = [
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("id", payload$.id, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("order_by", payload$.order_by, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("per_page", payload$.per_page, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("search", payload$.search, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("status", payload$.status, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListBusinessesResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListBusinessesResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 403, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListBusinessesBusinessesResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListBusinessesBusinessesResponseResponseBody$.inboundSchema.parse(
                {
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                }
            );
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.ListBusinessesBusinessesResponse500ResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Update a business for a customer
     *
     * @remarks
     * Updates a business for a customer using its ID and related customer ID.
     *
     * If successful, your response includes a copy of the updated business entity.
     */
    async update(
        input: operations.UpdateBusinessRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateBusinessResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateBusinessRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$.business, { explode: true });

        const pathParams$ = {
            business_id: enc$.encodeSimple("business_id", payload$.business_id, {
                explode: false,
                charEncoding: "percent",
            }),
            customer_id: enc$.encodeSimple("customer_id", payload$.customer_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent(
            "/customers/{customer_id}/businesses/{business_id}"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateBusinessResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateBusinessResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateBusinessBusinessesResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 403, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateBusinessBusinessesResponseResponseBody$.inboundSchema.parse(
                {
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                }
            );
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateBusinessBusinessesResponse404ResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateBusinessBusinessesResponse500ResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
