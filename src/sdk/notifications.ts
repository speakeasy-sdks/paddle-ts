/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../sdk/models/errors";
import * as operations from "../sdk/models/operations";
import * as shared from "../sdk/models/shared";

export class Notifications extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a notification setting
     *
     * @remarks
     * Creates a new notification setting (notification destination).
     *
     * Pass an array of event type names to `subscribed_events` to say which events you'd like to subscribe to. Paddle responds with the full event type object for each event type.
     *
     * If successful, your response includes a copy of the new notification setting entity. Use the returned `endpoint_secret_key` for webhook signature verification.
     */
    async createSetting(
        input: shared.NotificationSettingCreate | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateNotificationSettingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = shared.NotificationSettingCreate$.outboundSchema.optional().parse(input);
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/notification-settings")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateNotificationSettingResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.CreateNotificationSettingResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.CreateNotificationSettingNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.CreateNotificationSettingNotificationsResponseResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Delete a notification setting
     *
     * @remarks
     * Deletes a notification setting (notification destination) using its ID.
     *
     * When you delete a notification setting, it's permanently removed from your account. Paddle stops sending events to your destination, and you'll lose access to all the logs for this notification setting.
     *
     * There's no way to recover a deleted notification setting. Deactivate a notification setting using the update notification setting operation if you'll need access to the logs or want to reactivate later on.
     */
    async deleteSetting(
        input: operations.DeleteNotificationSettingRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteNotificationSettingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.DeleteNotificationSettingRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            notification_setting_id: enc$.encodeSimple(
                "notification_setting_id",
                payload$.notification_setting_id,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = this.templateURLComponent("/notification-settings/{notification_setting_id}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            return operations.DeleteNotificationSettingResponse$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
            });
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.DeleteNotificationSettingResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.DeleteNotificationSettingNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.DeleteNotificationSettingNotificationsResponseResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a notification
     *
     * @remarks
     * Returns a notification using its ID.
     */
    async get(
        input: operations.GetNotificationRequest,
        options?: RequestOptions
    ): Promise<operations.GetNotificationResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetNotificationRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            notification_id: enc$.encodeSimple("notification_id", payload$.notification_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/notifications/{notification_id}")(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetNotificationResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetNotificationResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetNotificationNotificationsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetNotificationNotificationsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get a notification setting
     *
     * @remarks
     * Returns a notification setting (notification destination) using its ID.
     */
    async getSetting(
        input: operations.GetNotificationSettingRequest,
        options?: RequestOptions
    ): Promise<operations.GetNotificationSettingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.GetNotificationSettingRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            notification_setting_id: enc$.encodeSimple(
                "notification_setting_id",
                payload$.notification_setting_id,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = this.templateURLComponent("/notification-settings/{notification_setting_id}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.GetNotificationSettingResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.GetNotificationSettingResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetNotificationSettingNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.GetNotificationSettingNotificationsResponseResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List notifications
     *
     * @remarks
     * Returns a paginated list of notifications. Use the query parameters to page through results.
     */
    async list(
        input: operations.ListNotificationsRequest,
        options?: RequestOptions
    ): Promise<operations.ListNotificationsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListNotificationsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const path$ = this.templateURLComponent("/notifications")();

        const query$ = [
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("filter", payload$.filter, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("from", payload$.from, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("notification_setting_id", payload$.notification_setting_id, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("order_by", payload$.order_by, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("per_page", payload$.per_page, {
                explode: true,
                charEncoding: "percent",
            }),
            enc$.encodeForm("search", payload$.search, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("status", payload$.status, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("to", payload$.to, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListNotificationsResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListNotificationsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListNotificationsNotificationsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List logs for a notification
     *
     * @remarks
     * Returns a paginated list of notification logs for a notification. A log includes information about delivery attempts, including failures.
     */
    async listLogs(
        input: operations.ListNotificationLogsRequest,
        options?: RequestOptions
    ): Promise<operations.ListNotificationLogsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ListNotificationLogsRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            notification_id: enc$.encodeSimple("notification_id", payload$.notification_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/notifications/{notification_id}/logs")(
            pathParams$
        );

        const query$ = [
            enc$.encodeForm("after", payload$.after, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("per_page", payload$.per_page, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListNotificationLogsResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListNotificationLogsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.ListNotificationLogsNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.ListNotificationLogsNotificationsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * List notification settings
     *
     * @remarks
     * Returns a list of notification settings (notification destinations).
     *
     * The response is not paginated.
     */
    async listSettings(
        options?: RequestOptions
    ): Promise<operations.ListNotificationSettingsResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const path$ = this.templateURLComponent("/notification-settings")();

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            { security: securitySettings$, method: "GET", path: path$, headers: headers$ },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ListNotificationSettingsResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ListNotificationSettingsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.ListNotificationSettingsNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Replay a notification
     *
     * @remarks
     * Attempts to resend a `delivered` or `failed` notification using its ID.
     *
     * Paddle creates a new notification entity for the replay, related to the same `event_id`.
     *
     * The new notification replay is sent to the `destination` against the `notification_setting_id`.
     */
    async replay(
        input: operations.ReplayNotificationRequest,
        options?: RequestOptions
    ): Promise<operations.ReplayNotificationResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = operations.ReplayNotificationRequest$.outboundSchema.parse(input);
        const body$ = null;

        const pathParams$ = {
            notification_id: enc$.encodeSimple("notification_id", payload$.notification_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/notifications/{notification_id}/replay")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 202, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ReplayNotificationResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ReplayNotificationResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result = errors.ReplayNotificationNotificationsResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.ReplayNotificationNotificationsResponseResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Replay notifications by notification setting
     */
    async replayBySetting(
        input: operations.PostNotificationSettingsNotificationSettingIdReplayRequest,
        options?: RequestOptions
    ): Promise<operations.PostNotificationSettingsNotificationSettingIdReplayResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ =
            operations.PostNotificationSettingsNotificationSettingIdReplayRequest$.outboundSchema.parse(
                input
            );

        const body$ = enc$.encodeJSON("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            notification_setting_id: enc$.encodeSimple(
                "notification_setting_id",
                payload$.notification_setting_id,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = this.templateURLComponent(
            "/notification-settings/{notification_setting_id}/replay"
        )(pathParams$);

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.PostNotificationSettingsNotificationSettingIdReplayResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.PostNotificationSettingsNotificationSettingIdReplayNotificationsResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.PostNotificationSettingsNotificationSettingIdReplayNotificationsResponseResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }

        return operations.PostNotificationSettingsNotificationSettingIdReplayResponse$.inboundSchema.parse(
            responseFields$
        );
    }

    /**
     * Update a notification setting
     *
     * @remarks
     * Updates a notification setting (notification destination) using its ID.
     *
     * When updating subscribed events, send the complete list of event types that you'd like to subscribe to — including existing event types. If you omit event types, they're removed from the notification setting.
     *
     * You only need to pass an event type name. Paddle responds with the full event type object for each event type.
     *
     * If successful, your response includes a copy of the updated notification setting entity.
     */
    async updateSettings(
        input: operations.UpdateNotificationSettingRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateNotificationSettingResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = operations.UpdateNotificationSettingRequest$.outboundSchema.parse(input);

        const body$ = enc$.encodeJSON("body", payload$["notification_setting-update"], {
            explode: true,
        });

        const pathParams$ = {
            notification_setting_id: enc$.encodeSimple(
                "notification_setting_id",
                payload$.notification_setting_id,
                { explode: false, charEncoding: "percent" }
            ),
        };

        const path$ = this.templateURLComponent("/notification-settings/{notification_setting_id}")(
            pathParams$
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.UpdateNotificationSettingResponse$.inboundSchema.parse({
                ...responseFields$,
                object: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 400, "application/json")) {
            const responseBody = await response.json();
            const result = errors.UpdateNotificationSettingResponseBody$.inboundSchema.parse({
                ...responseFields$,
                Headers: this.unpackHeaders(response.headers),
                ...responseBody,
            });
            throw result;
        } else if (this.matchResponse(response, 401, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateNotificationSettingNotificationsResponseBody$.inboundSchema.parse({
                    ...responseFields$,
                    Headers: this.unpackHeaders(response.headers),
                    ...responseBody,
                });
            throw result;
        } else if (this.matchResponse(response, 404, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateNotificationSettingNotificationsResponseResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else if (this.matchResponse(response, 500, "application/json")) {
            const responseBody = await response.json();
            const result =
                errors.UpdateNotificationSettingNotificationsResponse500ResponseBody$.inboundSchema.parse(
                    {
                        ...responseFields$,
                        Headers: this.unpackHeaders(response.headers),
                        ...responseBody,
                    }
                );
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
