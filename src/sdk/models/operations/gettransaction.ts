/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetTransactionRequest = {
    /**
     * Include related entities in the response.
     */
    include?: shared.IncludeTransaction | undefined;
    /**
     * Paddle ID of the transaction entity to work with.
     */
    transactionId: string;
};

/**
 * OK
 */
export type GetTransactionResponseBody = {
    /**
     * Represents a transaction entity with included entitites.
     */
    data: shared.TransactionIncludes;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type GetTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: GetTransactionResponseBody | undefined;
};

/** @internal */
export namespace GetTransactionRequest$ {
    export type Inbound = {
        include?: shared.IncludeTransaction | undefined;
        transaction_id: string;
    };

    export const inboundSchema: z.ZodType<GetTransactionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            include: shared.IncludeTransaction$.optional(),
            transaction_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.include === undefined ? null : { include: v.include }),
                transactionId: v.transaction_id,
            };
        });

    export type Outbound = {
        include?: shared.IncludeTransaction | undefined;
        transaction_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionRequest> = z
        .object({
            include: shared.IncludeTransaction$.optional(),
            transactionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.include === undefined ? null : { include: v.include }),
                transaction_id: v.transactionId,
            };
        });
}

/** @internal */
export namespace GetTransactionResponseBody$ {
    export type Inbound = {
        data: shared.TransactionIncludes$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetTransactionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: shared.TransactionIncludes$.inboundSchema,
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: shared.TransactionIncludes$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionResponseBody> = z
        .object({
            data: shared.TransactionIncludes$.outboundSchema,
            meta: shared.Meta$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace GetTransactionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: GetTransactionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransactionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTransactionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: GetTransactionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetTransactionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
