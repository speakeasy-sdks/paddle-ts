/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CancelSubscriptionRequestBody = {
    /**
     * When this scheduled change should take effect from. `immediately` is only allowed when canceling or resuming a paused subscription.
     */
    effectiveFrom?: shared.EffectiveFromNullable | null | undefined;
};

export type CancelSubscriptionRequest = {
    requestBody?: CancelSubscriptionRequestBody | undefined;
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

/**
 * OK
 */
export type CancelSubscriptionResponseBody = {
    /**
     * Represents a subscription entity.
     */
    data: shared.Subscription1;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type CancelSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: CancelSubscriptionResponseBody | undefined;
};

/** @internal */
export namespace CancelSubscriptionRequestBody$ {
    export type Inbound = {
        effective_from?: shared.EffectiveFromNullable | null | undefined;
    };

    export const inboundSchema: z.ZodType<CancelSubscriptionRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            effective_from: z.nullable(shared.EffectiveFromNullable$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.effective_from === undefined ? null : { effectiveFrom: v.effective_from }),
            };
        });

    export type Outbound = {
        effective_from?: shared.EffectiveFromNullable | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelSubscriptionRequestBody> =
        z
            .object({
                effectiveFrom: z.nullable(shared.EffectiveFromNullable$).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.effectiveFrom === undefined ? null : { effective_from: v.effectiveFrom }),
                };
            });
}

/** @internal */
export namespace CancelSubscriptionRequest$ {
    export type Inbound = {
        RequestBody?: CancelSubscriptionRequestBody$.Inbound | undefined;
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<CancelSubscriptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => CancelSubscriptionRequestBody$.inboundSchema).optional(),
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        RequestBody?: CancelSubscriptionRequestBody$.Outbound | undefined;
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelSubscriptionRequest> = z
        .object({
            requestBody: z.lazy(() => CancelSubscriptionRequestBody$.outboundSchema).optional(),
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace CancelSubscriptionResponseBody$ {
    export type Inbound = {
        data: shared.Subscription1$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<CancelSubscriptionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: shared.Subscription1$.inboundSchema,
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: shared.Subscription1$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelSubscriptionResponseBody> =
        z
            .object({
                data: shared.Subscription1$.outboundSchema,
                meta: shared.Meta$.outboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                    meta: v.meta,
                };
            });
}

/** @internal */
export namespace CancelSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: CancelSubscriptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CancelSubscriptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => CancelSubscriptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: CancelSubscriptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelSubscriptionResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => CancelSubscriptionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
