/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PauseSubscriptionRequestBody = {
    /**
     * When this scheduled change should take effect from. `immediately` is only allowed when canceling or resuming a paused subscription.
     */
    effectiveFrom?: shared.EffectiveFromNullable | null | undefined;
    /**
     * Timestamp following the RFC 3339 standard
     */
    resumeAt?: Date | undefined;
};

export type PauseSubscriptionRequest = {
    requestBody?: PauseSubscriptionRequestBody | undefined;
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

/**
 * OK
 */
export type PauseSubscriptionResponseBody = {
    /**
     * Represents a subscription entity.
     */
    data: shared.Subscription1;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type PauseSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: PauseSubscriptionResponseBody | undefined;
};

/** @internal */
export namespace PauseSubscriptionRequestBody$ {
    export type Inbound = {
        effective_from?: shared.EffectiveFromNullable | null | undefined;
        resume_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PauseSubscriptionRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            effective_from: z.nullable(shared.EffectiveFromNullable$).optional(),
            resume_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.effective_from === undefined ? null : { effectiveFrom: v.effective_from }),
                ...(v.resume_at === undefined ? null : { resumeAt: v.resume_at }),
            };
        });

    export type Outbound = {
        effective_from?: shared.EffectiveFromNullable | null | undefined;
        resume_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PauseSubscriptionRequestBody> = z
        .object({
            effectiveFrom: z.nullable(shared.EffectiveFromNullable$).optional(),
            resumeAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.effectiveFrom === undefined ? null : { effective_from: v.effectiveFrom }),
                ...(v.resumeAt === undefined ? null : { resume_at: v.resumeAt }),
            };
        });
}

/** @internal */
export namespace PauseSubscriptionRequest$ {
    export type Inbound = {
        RequestBody?: PauseSubscriptionRequestBody$.Inbound | undefined;
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<PauseSubscriptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z.lazy(() => PauseSubscriptionRequestBody$.inboundSchema).optional(),
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        RequestBody?: PauseSubscriptionRequestBody$.Outbound | undefined;
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PauseSubscriptionRequest> = z
        .object({
            requestBody: z.lazy(() => PauseSubscriptionRequestBody$.outboundSchema).optional(),
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace PauseSubscriptionResponseBody$ {
    export type Inbound = {
        data: shared.Subscription1$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<PauseSubscriptionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: shared.Subscription1$.inboundSchema,
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: shared.Subscription1$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PauseSubscriptionResponseBody> =
        z
            .object({
                data: shared.Subscription1$.outboundSchema,
                meta: shared.Meta$.outboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                    meta: v.meta,
                };
            });
}

/** @internal */
export namespace PauseSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: PauseSubscriptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PauseSubscriptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PauseSubscriptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: PauseSubscriptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PauseSubscriptionResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PauseSubscriptionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
