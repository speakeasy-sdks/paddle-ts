/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetSubscriptionUpdatePaymentMethodTransactionRequest = {
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

export type Checkout = {
    /**
     * The URL built in order to execute a payment via a checkout. This can be `null` as we do have scenarios where a transaction can only be paid with a wire transfer or perhaps just not desired. When `collection_mode` is `automatic`, this URL will always be present. <br /><br /> It is built using the sellers approved domain along with the transaction ID param appended `?_ptxn={id}`
     */
    url?: string | undefined;
};

/**
 * The status of the transaction itself. This field can be updated via a `PATCH` but you can only set a transaction to be `billed` or `canceled` manually. All other statuses are automatic.
 */
export enum Status {
    Draft = "draft",
    Ready = "ready",
    Billed = "billed",
    Completed = "completed",
    Canceled = "canceled",
    PastDue = "past_due",
}

export type Transaction = {
    /**
     * Represents an address entity.
     */
    address?: shared.Address | undefined;
    /**
     * ID of the Billing Address that this Transaction is for
     */
    addressId?: string | null | undefined;
    /**
     * Only returned if adjustments exist for this transaction.
     */
    adjustments?: Array<shared.Adjustment2> | undefined;
    billedAt?: string | null | undefined;
    billingDetails?: shared.BillingDetails1 | null | undefined;
    /**
     * The period of time that this transaction covers. This is used by recurring subscription transactions as well as all invoicing transactions to indicate the period of time the charges in the transaction relate to
     */
    billingPeriod?: shared.TransactionBillingPeriod | null | undefined;
    /**
     * Represents a business entity.
     */
    business?: shared.Business | undefined;
    /**
     * ID of the Business that this Transaction is for
     */
    businessId?: string | null | undefined;
    checkout?: Checkout | null | undefined;
    /**
     * Describes how the payment is collected. Manual mode is for invoicing where a customer is first sent an invoice and requires manual intervention on their end to initiate a payment and there are normally payment terms involved eg they have to pay within 30 days. Automatic payments are where there is not usually any action on the sellers part to initiate a payment eg a customer visits a website and purchases something via a checkout or when a recurring transaction for a subscription is paid for via a payment method that is stored on file.
     */
    collectionMode?: shared.CollectionMode1 | undefined;
    /**
     * Timestamp following the RFC 3339 standard
     */
    createdAt?: string | undefined;
    /**
     * ISO 4217 code of a currency
     */
    currencyCode?: shared.CurrencyCode1 | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: shared.CustomData | null | undefined;
    /**
     * Represents a customer entity.
     */
    customer?: shared.Customer | undefined;
    /**
     * ID of the Customer that this Transaction is for
     */
    customerId?: string | null | undefined;
    /**
     * Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
     */
    details?: shared.TransactionDetails | undefined;
    /**
     * Represents a discount entity.
     */
    discount?: shared.Discount | undefined;
    /**
     * ID of the discount you want to apply
     */
    discountId?: string | null | undefined;
    /**
     * A short prefixed ID format by Paddle.
     */
    id?: string | undefined;
    /**
     * ID of the Invoice associated to this transaction
     */
    invoiceId?: string | null | undefined;
    /**
     * A unique invoice reference, that is sequential and gapless
     */
    invoiceNumber?: string | null | undefined;
    items: Array<shared.TransactionItem>;
    /**
     * Indicates what initiated this transaction. Read only for sellers - read/write for Paddle
     */
    origin?: shared.TransactionOrigin | undefined;
    /**
     * An array of payment attempts sorted by `created_at` in descending order
     */
    payments?: Array<shared.TransactionPaymentAttempt> | undefined;
    /**
     * The status of the transaction itself. This field can be updated via a `PATCH` but you can only set a transaction to be `billed` or `canceled` manually. All other statuses are automatic.
     */
    status?: Status | undefined;
    /**
     * ID of the Subscription that this transaction belongs to
     */
    subscriptionId?: string | null | undefined;
    /**
     * Timestamp following the RFC 3339 standard
     */
    updatedAt?: string | undefined;
};

/**
 * OK
 */
export type GetSubscriptionUpdatePaymentMethodTransactionResponseBody = {
    data?: Transaction | undefined;
};

export type GetSubscriptionUpdatePaymentMethodTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: GetSubscriptionUpdatePaymentMethodTransactionResponseBody | undefined;
};

/** @internal */
export namespace GetSubscriptionUpdatePaymentMethodTransactionRequest$ {
    export type Inbound = {
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionUpdatePaymentMethodTransactionRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionUpdatePaymentMethodTransactionRequest
    > = z
        .object({
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace Checkout$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Checkout, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Checkout> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export namespace Transaction$ {
    export type Inbound = {
        address?: shared.Address$.Inbound | undefined;
        address_id?: string | null | undefined;
        adjustments?: Array<shared.Adjustment2$.Inbound> | undefined;
        billed_at?: string | null | undefined;
        billing_details?: shared.BillingDetails1$.Inbound | null | undefined;
        billing_period?: shared.TransactionBillingPeriod$.Inbound | null | undefined;
        business?: shared.Business$.Inbound | undefined;
        business_id?: string | null | undefined;
        checkout?: Checkout$.Inbound | null | undefined;
        collection_mode?: shared.CollectionMode1 | undefined;
        created_at?: string | undefined;
        currency_code?: shared.CurrencyCode1 | undefined;
        custom_data?: shared.CustomData$.Inbound | null | undefined;
        customer?: shared.Customer$.Inbound | undefined;
        customer_id?: string | null | undefined;
        details?: shared.TransactionDetails$.Inbound | undefined;
        discount?: shared.Discount$.Inbound | undefined;
        discount_id?: string | null | undefined;
        id?: string | undefined;
        invoice_id?: string | null | undefined;
        invoice_number?: string | null | undefined;
        items: Array<shared.TransactionItem$.Inbound>;
        origin?: shared.TransactionOrigin | undefined;
        payments?: Array<shared.TransactionPaymentAttempt$.Inbound> | undefined;
        status?: Status | undefined;
        subscription_id?: string | null | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, Inbound> = z
        .object({
            address: shared.Address$.inboundSchema.optional(),
            address_id: z.nullable(z.string()).optional(),
            adjustments: z.array(shared.Adjustment2$.inboundSchema).optional(),
            billed_at: z.nullable(z.string()).optional(),
            billing_details: z.nullable(shared.BillingDetails1$.inboundSchema).optional(),
            billing_period: z.nullable(shared.TransactionBillingPeriod$.inboundSchema).optional(),
            business: shared.Business$.inboundSchema.optional(),
            business_id: z.nullable(z.string()).optional(),
            checkout: z.nullable(z.lazy(() => Checkout$.inboundSchema)).optional(),
            collection_mode: shared.CollectionMode1$.default(shared.CollectionMode1.Automatic),
            created_at: z.string().optional(),
            currency_code: shared.CurrencyCode1$.optional(),
            custom_data: z.nullable(shared.CustomData$.inboundSchema).optional(),
            customer: shared.Customer$.inboundSchema.optional(),
            customer_id: z.nullable(z.string()).optional(),
            details: shared.TransactionDetails$.inboundSchema.optional(),
            discount: shared.Discount$.inboundSchema.optional(),
            discount_id: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            invoice_id: z.nullable(z.string()).optional(),
            invoice_number: z.nullable(z.string()).optional(),
            items: z.array(shared.TransactionItem$.inboundSchema),
            origin: shared.TransactionOrigin$.optional(),
            payments: z.array(shared.TransactionPaymentAttempt$.inboundSchema).optional(),
            status: Status$.optional(),
            subscription_id: z.nullable(z.string()).optional(),
            updated_at: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.billed_at === undefined ? null : { billedAt: v.billed_at }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.billing_period === undefined ? null : { billingPeriod: v.billing_period }),
                ...(v.business === undefined ? null : { business: v.business }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.checkout === undefined ? null : { checkout: v.checkout }),
                ...(v.collection_mode === undefined ? null : { collectionMode: v.collection_mode }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.customer === undefined ? null : { customer: v.customer }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.discount_id === undefined ? null : { discountId: v.discount_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoice_id === undefined ? null : { invoiceId: v.invoice_id }),
                ...(v.invoice_number === undefined ? null : { invoiceNumber: v.invoice_number }),
                items: v.items,
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payments === undefined ? null : { payments: v.payments }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscription_id === undefined ? null : { subscriptionId: v.subscription_id }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        address?: shared.Address$.Outbound | undefined;
        address_id?: string | null | undefined;
        adjustments?: Array<shared.Adjustment2$.Outbound> | undefined;
        billed_at?: string | null | undefined;
        billing_details?: shared.BillingDetails1$.Outbound | null | undefined;
        billing_period?: shared.TransactionBillingPeriod$.Outbound | null | undefined;
        business?: shared.Business$.Outbound | undefined;
        business_id?: string | null | undefined;
        checkout?: Checkout$.Outbound | null | undefined;
        collection_mode: shared.CollectionMode1;
        created_at?: string | undefined;
        currency_code?: shared.CurrencyCode1 | undefined;
        custom_data?: shared.CustomData$.Outbound | null | undefined;
        customer?: shared.Customer$.Outbound | undefined;
        customer_id?: string | null | undefined;
        details?: shared.TransactionDetails$.Outbound | undefined;
        discount?: shared.Discount$.Outbound | undefined;
        discount_id?: string | null | undefined;
        id?: string | undefined;
        invoice_id?: string | null | undefined;
        invoice_number?: string | null | undefined;
        items: Array<shared.TransactionItem$.Outbound>;
        origin?: shared.TransactionOrigin | undefined;
        payments?: Array<shared.TransactionPaymentAttempt$.Outbound> | undefined;
        status?: Status | undefined;
        subscription_id?: string | null | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transaction> = z
        .object({
            address: shared.Address$.outboundSchema.optional(),
            addressId: z.nullable(z.string()).optional(),
            adjustments: z.array(shared.Adjustment2$.outboundSchema).optional(),
            billedAt: z.nullable(z.string()).optional(),
            billingDetails: z.nullable(shared.BillingDetails1$.outboundSchema).optional(),
            billingPeriod: z.nullable(shared.TransactionBillingPeriod$.outboundSchema).optional(),
            business: shared.Business$.outboundSchema.optional(),
            businessId: z.nullable(z.string()).optional(),
            checkout: z.nullable(z.lazy(() => Checkout$.outboundSchema)).optional(),
            collectionMode: shared.CollectionMode1$.default(shared.CollectionMode1.Automatic),
            createdAt: z.string().optional(),
            currencyCode: shared.CurrencyCode1$.optional(),
            customData: z.nullable(shared.CustomData$.outboundSchema).optional(),
            customer: shared.Customer$.outboundSchema.optional(),
            customerId: z.nullable(z.string()).optional(),
            details: shared.TransactionDetails$.outboundSchema.optional(),
            discount: shared.Discount$.outboundSchema.optional(),
            discountId: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            invoiceId: z.nullable(z.string()).optional(),
            invoiceNumber: z.nullable(z.string()).optional(),
            items: z.array(shared.TransactionItem$.outboundSchema),
            origin: shared.TransactionOrigin$.optional(),
            payments: z.array(shared.TransactionPaymentAttempt$.outboundSchema).optional(),
            status: Status$.optional(),
            subscriptionId: z.nullable(z.string()).optional(),
            updatedAt: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.billedAt === undefined ? null : { billed_at: v.billedAt }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.billingPeriod === undefined ? null : { billing_period: v.billingPeriod }),
                ...(v.business === undefined ? null : { business: v.business }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.checkout === undefined ? null : { checkout: v.checkout }),
                collection_mode: v.collectionMode,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.customer === undefined ? null : { customer: v.customer }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.discountId === undefined ? null : { discount_id: v.discountId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceId === undefined ? null : { invoice_id: v.invoiceId }),
                ...(v.invoiceNumber === undefined ? null : { invoice_number: v.invoiceNumber }),
                items: v.items,
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payments === undefined ? null : { payments: v.payments }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscriptionId === undefined ? null : { subscription_id: v.subscriptionId }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace GetSubscriptionUpdatePaymentMethodTransactionResponseBody$ {
    export type Inbound = {
        data?: Transaction$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionUpdatePaymentMethodTransactionResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => Transaction$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Transaction$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionUpdatePaymentMethodTransactionResponseBody
    > = z
        .object({
            data: z.lazy(() => Transaction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace GetSubscriptionUpdatePaymentMethodTransactionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: GetSubscriptionUpdatePaymentMethodTransactionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionUpdatePaymentMethodTransactionResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(
                    () => GetSubscriptionUpdatePaymentMethodTransactionResponseBody$.inboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: GetSubscriptionUpdatePaymentMethodTransactionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionUpdatePaymentMethodTransactionResponse
    > = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(
                    () => GetSubscriptionUpdatePaymentMethodTransactionResponseBody$.outboundSchema
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
