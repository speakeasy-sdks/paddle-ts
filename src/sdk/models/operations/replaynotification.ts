/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ReplayNotificationRequest = {
    /**
     * Paddle ID of the notification entity to work with.
     */
    notificationId: string;
};

export type ReplayNotificationData = {
    /**
     * Unique Paddle ID for this notification, prefixed with `ntf_`.
     */
    notificationId?: string | undefined;
};

/**
 * Accepted
 */
export type ReplayNotificationResponseBody = {
    data?: ReplayNotificationData | undefined;
    /**
     * Information about this response.
     */
    meta?: shared.Meta | undefined;
};

export type ReplayNotificationResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Accepted
     */
    object?: ReplayNotificationResponseBody | undefined;
};

/** @internal */
export namespace ReplayNotificationRequest$ {
    export type Inbound = {
        notification_id: string;
    };

    export const inboundSchema: z.ZodType<ReplayNotificationRequest, z.ZodTypeDef, Inbound> = z
        .object({
            notification_id: z.string(),
        })
        .transform((v) => {
            return {
                notificationId: v.notification_id,
            };
        });

    export type Outbound = {
        notification_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplayNotificationRequest> = z
        .object({
            notificationId: z.string(),
        })
        .transform((v) => {
            return {
                notification_id: v.notificationId,
            };
        });
}

/** @internal */
export namespace ReplayNotificationData$ {
    export type Inbound = {
        notification_id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ReplayNotificationData, z.ZodTypeDef, Inbound> = z
        .object({
            notification_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.notification_id === undefined ? null : { notificationId: v.notification_id }),
            };
        });

    export type Outbound = {
        notification_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplayNotificationData> = z
        .object({
            notificationId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.notificationId === undefined ? null : { notification_id: v.notificationId }),
            };
        });
}

/** @internal */
export namespace ReplayNotificationResponseBody$ {
    export type Inbound = {
        data?: ReplayNotificationData$.Inbound | undefined;
        meta?: shared.Meta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ReplayNotificationResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => ReplayNotificationData$.inboundSchema).optional(),
            meta: shared.Meta$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        data?: ReplayNotificationData$.Outbound | undefined;
        meta?: shared.Meta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplayNotificationResponseBody> =
        z
            .object({
                data: z.lazy(() => ReplayNotificationData$.outboundSchema).optional(),
                meta: shared.Meta$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                    ...(v.meta === undefined ? null : { meta: v.meta }),
                };
            });
}

/** @internal */
export namespace ReplayNotificationResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: ReplayNotificationResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ReplayNotificationResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ReplayNotificationResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: ReplayNotificationResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplayNotificationResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ReplayNotificationResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
