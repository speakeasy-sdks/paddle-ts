/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type UpdateSubscriptionRequest = {
    subscriptionUpdate?: shared.SubscriptionUpdate | undefined;
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

/**
 * OK
 */
export type UpdateSubscriptionResponseBody = {
    /**
     * Represents a subscription entity.
     */
    data: shared.Subscription1;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type UpdateSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: UpdateSubscriptionResponseBody | undefined;
};

/** @internal */
export namespace UpdateSubscriptionRequest$ {
    export type Inbound = {
        "subscription-update"?: shared.SubscriptionUpdate$.Inbound | undefined;
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<UpdateSubscriptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "subscription-update": shared.SubscriptionUpdate$.inboundSchema.optional(),
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v["subscription-update"] === undefined
                    ? null
                    : { subscriptionUpdate: v["subscription-update"] }),
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        "subscription-update"?: shared.SubscriptionUpdate$.Outbound | undefined;
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateSubscriptionRequest> = z
        .object({
            subscriptionUpdate: shared.SubscriptionUpdate$.outboundSchema.optional(),
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.subscriptionUpdate === undefined
                    ? null
                    : { "subscription-update": v.subscriptionUpdate }),
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace UpdateSubscriptionResponseBody$ {
    export type Inbound = {
        data: shared.Subscription1$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateSubscriptionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: shared.Subscription1$.inboundSchema,
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: shared.Subscription1$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateSubscriptionResponseBody> =
        z
            .object({
                data: shared.Subscription1$.outboundSchema,
                meta: shared.Meta$.outboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                    meta: v.meta,
                };
            });
}

/** @internal */
export namespace UpdateSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: UpdateSubscriptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateSubscriptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UpdateSubscriptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: UpdateSubscriptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateSubscriptionResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UpdateSubscriptionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
