/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PostNotificationSettingsNotificationSettingIdReplayRequestBody = {
    /**
     * Only include entities that contain the given ID. Supports transaction, customer and subscription IDs.
     */
    filter?: string | undefined;
    /**
     * Timestamp following the RFC 3339 standard
     */
    from: Date;
    /**
     * Timestamp following the RFC 3339 standard
     */
    to: Date;
};

export type PostNotificationSettingsNotificationSettingIdReplayRequest = {
    requestBody?: PostNotificationSettingsNotificationSettingIdReplayRequestBody | undefined;
    /**
     * Paddle ID of the notification setting entity (notification destination) to work with.
     */
    notificationSettingId: string;
};

export type PostNotificationSettingsNotificationSettingIdReplayResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace PostNotificationSettingsNotificationSettingIdReplayRequestBody$ {
    export type Inbound = {
        filter?: string | undefined;
        from: string;
        to: string;
    };

    export const inboundSchema: z.ZodType<
        PostNotificationSettingsNotificationSettingIdReplayRequestBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            filter: z.string().optional(),
            from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            to: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                from: v.from,
                to: v.to,
            };
        });

    export type Outbound = {
        filter?: string | undefined;
        from: string;
        to: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostNotificationSettingsNotificationSettingIdReplayRequestBody
    > = z
        .object({
            filter: z.string().optional(),
            from: z.date().transform((v) => v.toISOString()),
            to: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                from: v.from,
                to: v.to,
            };
        });
}

/** @internal */
export namespace PostNotificationSettingsNotificationSettingIdReplayRequest$ {
    export type Inbound = {
        RequestBody?:
            | PostNotificationSettingsNotificationSettingIdReplayRequestBody$.Inbound
            | undefined;
        notification_setting_id: string;
    };

    export const inboundSchema: z.ZodType<
        PostNotificationSettingsNotificationSettingIdReplayRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            RequestBody: z
                .lazy(
                    () =>
                        PostNotificationSettingsNotificationSettingIdReplayRequestBody$.inboundSchema
                )
                .optional(),
            notification_setting_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                notificationSettingId: v.notification_setting_id,
            };
        });

    export type Outbound = {
        RequestBody?:
            | PostNotificationSettingsNotificationSettingIdReplayRequestBody$.Outbound
            | undefined;
        notification_setting_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostNotificationSettingsNotificationSettingIdReplayRequest
    > = z
        .object({
            requestBody: z
                .lazy(
                    () =>
                        PostNotificationSettingsNotificationSettingIdReplayRequestBody$.outboundSchema
                )
                .optional(),
            notificationSettingId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                notification_setting_id: v.notificationSettingId,
            };
        });
}

/** @internal */
export namespace PostNotificationSettingsNotificationSettingIdReplayResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        PostNotificationSettingsNotificationSettingIdReplayResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostNotificationSettingsNotificationSettingIdReplayResponse
    > = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
