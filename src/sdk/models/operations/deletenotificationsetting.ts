/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DeleteNotificationSettingRequest = {
    /**
     * Paddle ID of the notification setting entity (notification destination) to work with.
     */
    notificationSettingId: string;
};

export type DeleteNotificationSettingResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DeleteNotificationSettingRequest$ {
    export type Inbound = {
        notification_setting_id: string;
    };

    export const inboundSchema: z.ZodType<DeleteNotificationSettingRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                notification_setting_id: z.string(),
            })
            .transform((v) => {
                return {
                    notificationSettingId: v.notification_setting_id,
                };
            });

    export type Outbound = {
        notification_setting_id: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteNotificationSettingRequest
    > = z
        .object({
            notificationSettingId: z.string(),
        })
        .transform((v) => {
            return {
                notification_setting_id: v.notificationSettingId,
            };
        });
}

/** @internal */
export namespace DeleteNotificationSettingResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        DeleteNotificationSettingResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeleteNotificationSettingResponse
    > = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
