/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type Three = {};

export type EffectiveFromEnum = {
    /**
     * When this scheduled change should take effect from. `immediately` is only allowed when canceling or resuming a paused subscription.
     */
    effectiveFrom: shared.EffectiveFromNullable | null;
};

export type EffectiveFromDate = {
    /**
     * RFC 3339 datetime string.
     */
    effectiveFrom: Date;
};

export type ResumeSubscriptionRequestBody = Three | EffectiveFromDate | EffectiveFromEnum;

export type ResumeSubscriptionRequest = {
    requestBody?: Three | EffectiveFromDate | EffectiveFromEnum | null | undefined;
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

/**
 * OK
 */
export type ResumeSubscriptionResponseBody = {
    /**
     * Represents a subscription entity.
     */
    data: shared.Subscription1;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type ResumeSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: ResumeSubscriptionResponseBody | undefined;
};

/** @internal */
export namespace Three$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z.object({});
}

/** @internal */
export namespace EffectiveFromEnum$ {
    export type Inbound = {
        effective_from: shared.EffectiveFromNullable | null;
    };

    export const inboundSchema: z.ZodType<EffectiveFromEnum, z.ZodTypeDef, Inbound> = z
        .object({
            effective_from: z.nullable(shared.EffectiveFromNullable$),
        })
        .transform((v) => {
            return {
                effectiveFrom: v.effective_from,
            };
        });

    export type Outbound = {
        effective_from: shared.EffectiveFromNullable | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EffectiveFromEnum> = z
        .object({
            effectiveFrom: z.nullable(shared.EffectiveFromNullable$),
        })
        .transform((v) => {
            return {
                effective_from: v.effectiveFrom,
            };
        });
}

/** @internal */
export namespace EffectiveFromDate$ {
    export type Inbound = {
        effective_from: string;
    };

    export const inboundSchema: z.ZodType<EffectiveFromDate, z.ZodTypeDef, Inbound> = z
        .object({
            effective_from: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                effectiveFrom: v.effective_from,
            };
        });

    export type Outbound = {
        effective_from: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EffectiveFromDate> = z
        .object({
            effectiveFrom: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                effective_from: v.effectiveFrom,
            };
        });
}

/** @internal */
export namespace ResumeSubscriptionRequestBody$ {
    export type Inbound = Three$.Inbound | EffectiveFromDate$.Inbound | EffectiveFromEnum$.Inbound;

    export type Outbound =
        | Three$.Outbound
        | EffectiveFromDate$.Outbound
        | EffectiveFromEnum$.Outbound;

    export const inboundSchema: z.ZodType<ResumeSubscriptionRequestBody, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => Three$.inboundSchema),
            z.lazy(() => EffectiveFromDate$.inboundSchema),
            z.lazy(() => EffectiveFromEnum$.inboundSchema),
        ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResumeSubscriptionRequestBody> =
        z.union([
            z.lazy(() => Three$.outboundSchema),
            z.lazy(() => EffectiveFromDate$.outboundSchema),
            z.lazy(() => EffectiveFromEnum$.outboundSchema),
        ]);
}

/** @internal */
export namespace ResumeSubscriptionRequest$ {
    export type Inbound = {
        RequestBody?:
            | Three$.Inbound
            | EffectiveFromDate$.Inbound
            | EffectiveFromEnum$.Inbound
            | null
            | undefined;
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<ResumeSubscriptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            RequestBody: z
                .nullable(
                    z.union([
                        z.lazy(() => Three$.inboundSchema),
                        z.lazy(() => EffectiveFromDate$.inboundSchema),
                        z.lazy(() => EffectiveFromEnum$.inboundSchema),
                    ])
                )
                .optional(),
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        RequestBody?:
            | Three$.Outbound
            | EffectiveFromDate$.Outbound
            | EffectiveFromEnum$.Outbound
            | null
            | undefined;
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResumeSubscriptionRequest> = z
        .object({
            requestBody: z
                .nullable(
                    z.union([
                        z.lazy(() => Three$.outboundSchema),
                        z.lazy(() => EffectiveFromDate$.outboundSchema),
                        z.lazy(() => EffectiveFromEnum$.outboundSchema),
                    ])
                )
                .optional(),
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace ResumeSubscriptionResponseBody$ {
    export type Inbound = {
        data: shared.Subscription1$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<ResumeSubscriptionResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: shared.Subscription1$.inboundSchema,
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: shared.Subscription1$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResumeSubscriptionResponseBody> =
        z
            .object({
                data: shared.Subscription1$.outboundSchema,
                meta: shared.Meta$.outboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                    meta: v.meta,
                };
            });
}

/** @internal */
export namespace ResumeSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: ResumeSubscriptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ResumeSubscriptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ResumeSubscriptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: ResumeSubscriptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResumeSubscriptionResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ResumeSubscriptionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
