/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type PreviewSubscriptionRequest = {
    subscriptionUpdate?: shared.SubscriptionUpdate | undefined;
    /**
     * Paddle ID of the subscription entity to work with.
     */
    subscriptionId: string;
};

/**
 * Details of the discount applied to this subscription.
 */
export type PreviewSubscriptionDiscount = {
    /**
     * RFC 3339 datetime string.
     */
    endsAt: Date;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    id: string;
    /**
     * RFC 3339 datetime string.
     */
    startsAt: Date;
};

/**
 * Represents a subscription preview.
 */
export type PreviewSubscriptionSubscriptionPreview = {
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    billingCycle?: shared.Period2 | undefined;
    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    billingDetails?: shared.BillingDetails2 | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    canceledAt?: Date | undefined;
    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    collectionMode?: shared.CollectionMode2 | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: shared.CurrencyCode2 | undefined;
    currentBillingPeriod?: shared.TimePeriod | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: shared.CustomData | null | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Details of the discount applied to this subscription.
     */
    discount?: PreviewSubscriptionDiscount | null | undefined;
    /**
     * RFC 3339 datetime string.
     */
    firstBilledAt?: Date | undefined;
    /**
     * Preview of the next transaction for this subscription. May include prorated charges that are not yet billed and one-time charges. `null` if the subscription is scheduled to cancel or pause.
     */
    immediateTransaction?: shared.SubscriptionNextTransaction | undefined;
    /**
     * List of items on this subscription. Only recurring items are returned.
     */
    items?: Array<shared.ItemSubscription> | undefined;
    /**
     * Public URLs that customers can use to make changes to this subscription.
     */
    managementUrls?: shared.SubscriptionManagementUrls | undefined;
    /**
     * RFC 3339 datetime string.
     */
    nextBilledAt?: Date | undefined;
    /**
     * Preview of the next transaction for this subscription. May include prorated charges that are not yet billed and one-time charges. `null` if the subscription is scheduled to cancel or pause.
     */
    nextTransaction?: shared.SubscriptionNextTransaction | undefined;
    /**
     * RFC 3339 datetime string.
     */
    pausedAt?: Date | undefined;
    /**
     * Preview of the recurring transaction for this subscription. This is what the customer can expect to be billed when there are no prorated or one-off charges.
     */
    recurringTransactionDetails?: shared.SubscriptionRecurringTransactionDetails | undefined;
    /**
     * Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
     */
    scheduledChange?: shared.SubscriptionScheduledChange | undefined;
    /**
     * RFC 3339 datetime string.
     */
    startedAt?: Date | undefined;
    /**
     * Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
     */
    status?: shared.SchemaStatusSubscription | undefined;
    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    updatedAt?: Date | undefined;
};

/**
 * OK
 */
export type PreviewSubscriptionResponseBody = {
    data: PreviewSubscriptionSubscriptionPreview;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type PreviewSubscriptionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: PreviewSubscriptionResponseBody | undefined;
};

/** @internal */
export namespace PreviewSubscriptionRequest$ {
    export type Inbound = {
        "subscription-update"?: shared.SubscriptionUpdate$.Inbound | undefined;
        subscription_id: string;
    };

    export const inboundSchema: z.ZodType<PreviewSubscriptionRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "subscription-update": shared.SubscriptionUpdate$.inboundSchema.optional(),
            subscription_id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v["subscription-update"] === undefined
                    ? null
                    : { subscriptionUpdate: v["subscription-update"] }),
                subscriptionId: v.subscription_id,
            };
        });

    export type Outbound = {
        "subscription-update"?: shared.SubscriptionUpdate$.Outbound | undefined;
        subscription_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviewSubscriptionRequest> = z
        .object({
            subscriptionUpdate: shared.SubscriptionUpdate$.outboundSchema.optional(),
            subscriptionId: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.subscriptionUpdate === undefined
                    ? null
                    : { "subscription-update": v.subscriptionUpdate }),
                subscription_id: v.subscriptionId,
            };
        });
}

/** @internal */
export namespace PreviewSubscriptionDiscount$ {
    export type Inbound = {
        ends_at: string;
        id: string;
        starts_at: string;
    };

    export const inboundSchema: z.ZodType<PreviewSubscriptionDiscount, z.ZodTypeDef, Inbound> = z
        .object({
            ends_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            starts_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                endsAt: v.ends_at,
                id: v.id,
                startsAt: v.starts_at,
            };
        });

    export type Outbound = {
        ends_at: string;
        id: string;
        starts_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviewSubscriptionDiscount> = z
        .object({
            endsAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            startsAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ends_at: v.endsAt,
                id: v.id,
                starts_at: v.startsAt,
            };
        });
}

/** @internal */
export namespace PreviewSubscriptionSubscriptionPreview$ {
    export type Inbound = {
        address_id?: string | undefined;
        billing_cycle?: shared.Period2$.Inbound | undefined;
        billing_details?: shared.BillingDetails2$.Inbound | undefined;
        business_id?: string | undefined;
        canceled_at?: string | undefined;
        collection_mode?: shared.CollectionMode2 | undefined;
        created_at?: string | undefined;
        currency_code?: shared.CurrencyCode2 | undefined;
        current_billing_period?: shared.TimePeriod$.Inbound | undefined;
        custom_data?: shared.CustomData$.Inbound | null | undefined;
        customer_id?: string | undefined;
        discount?: PreviewSubscriptionDiscount$.Inbound | null | undefined;
        first_billed_at?: string | undefined;
        immediate_transaction?: shared.SubscriptionNextTransaction$.Inbound | undefined;
        items?: Array<shared.ItemSubscription$.Inbound> | undefined;
        management_urls?: shared.SubscriptionManagementUrls$.Inbound | undefined;
        next_billed_at?: string | undefined;
        next_transaction?: shared.SubscriptionNextTransaction$.Inbound | undefined;
        paused_at?: string | undefined;
        recurring_transaction_details?:
            | shared.SubscriptionRecurringTransactionDetails$.Inbound
            | undefined;
        scheduled_change?: shared.SubscriptionScheduledChange$.Inbound | undefined;
        started_at?: string | undefined;
        status?: shared.SchemaStatusSubscription | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PreviewSubscriptionSubscriptionPreview,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            address_id: z.string().optional(),
            billing_cycle: shared.Period2$.inboundSchema.optional(),
            billing_details: shared.BillingDetails2$.inboundSchema.optional(),
            business_id: z.string().optional(),
            canceled_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            collection_mode: shared.CollectionMode2$.default(shared.CollectionMode2.Automatic),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency_code: shared.CurrencyCode2$.optional(),
            current_billing_period: shared.TimePeriod$.inboundSchema.optional(),
            custom_data: z.nullable(shared.CustomData$.inboundSchema).optional(),
            customer_id: z.string().optional(),
            discount: z
                .nullable(z.lazy(() => PreviewSubscriptionDiscount$.inboundSchema))
                .optional(),
            first_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            immediate_transaction: shared.SubscriptionNextTransaction$.inboundSchema.optional(),
            items: z.array(shared.ItemSubscription$.inboundSchema).optional(),
            management_urls: shared.SubscriptionManagementUrls$.inboundSchema.optional(),
            next_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            next_transaction: shared.SubscriptionNextTransaction$.inboundSchema.optional(),
            paused_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            recurring_transaction_details:
                shared.SubscriptionRecurringTransactionDetails$.inboundSchema.optional(),
            scheduled_change: shared.SubscriptionScheduledChange$.inboundSchema.optional(),
            started_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: shared.SchemaStatusSubscription$.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.billing_cycle === undefined ? null : { billingCycle: v.billing_cycle }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.canceled_at === undefined ? null : { canceledAt: v.canceled_at }),
                ...(v.collection_mode === undefined ? null : { collectionMode: v.collection_mode }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.current_billing_period === undefined
                    ? null
                    : { currentBillingPeriod: v.current_billing_period }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.first_billed_at === undefined ? null : { firstBilledAt: v.first_billed_at }),
                ...(v.immediate_transaction === undefined
                    ? null
                    : { immediateTransaction: v.immediate_transaction }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.management_urls === undefined ? null : { managementUrls: v.management_urls }),
                ...(v.next_billed_at === undefined ? null : { nextBilledAt: v.next_billed_at }),
                ...(v.next_transaction === undefined
                    ? null
                    : { nextTransaction: v.next_transaction }),
                ...(v.paused_at === undefined ? null : { pausedAt: v.paused_at }),
                ...(v.recurring_transaction_details === undefined
                    ? null
                    : { recurringTransactionDetails: v.recurring_transaction_details }),
                ...(v.scheduled_change === undefined
                    ? null
                    : { scheduledChange: v.scheduled_change }),
                ...(v.started_at === undefined ? null : { startedAt: v.started_at }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        address_id?: string | undefined;
        billing_cycle?: shared.Period2$.Outbound | undefined;
        billing_details?: shared.BillingDetails2$.Outbound | undefined;
        business_id?: string | undefined;
        canceled_at?: string | undefined;
        collection_mode: shared.CollectionMode2;
        created_at?: string | undefined;
        currency_code?: shared.CurrencyCode2 | undefined;
        current_billing_period?: shared.TimePeriod$.Outbound | undefined;
        custom_data?: shared.CustomData$.Outbound | null | undefined;
        customer_id?: string | undefined;
        discount?: PreviewSubscriptionDiscount$.Outbound | null | undefined;
        first_billed_at?: string | undefined;
        immediate_transaction?: shared.SubscriptionNextTransaction$.Outbound | undefined;
        items?: Array<shared.ItemSubscription$.Outbound> | undefined;
        management_urls?: shared.SubscriptionManagementUrls$.Outbound | undefined;
        next_billed_at?: string | undefined;
        next_transaction?: shared.SubscriptionNextTransaction$.Outbound | undefined;
        paused_at?: string | undefined;
        recurring_transaction_details?:
            | shared.SubscriptionRecurringTransactionDetails$.Outbound
            | undefined;
        scheduled_change?: shared.SubscriptionScheduledChange$.Outbound | undefined;
        started_at?: string | undefined;
        status?: shared.SchemaStatusSubscription | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PreviewSubscriptionSubscriptionPreview
    > = z
        .object({
            addressId: z.string().optional(),
            billingCycle: shared.Period2$.outboundSchema.optional(),
            billingDetails: shared.BillingDetails2$.outboundSchema.optional(),
            businessId: z.string().optional(),
            canceledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            collectionMode: shared.CollectionMode2$.default(shared.CollectionMode2.Automatic),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currencyCode: shared.CurrencyCode2$.optional(),
            currentBillingPeriod: shared.TimePeriod$.outboundSchema.optional(),
            customData: z.nullable(shared.CustomData$.outboundSchema).optional(),
            customerId: z.string().optional(),
            discount: z
                .nullable(z.lazy(() => PreviewSubscriptionDiscount$.outboundSchema))
                .optional(),
            firstBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            immediateTransaction: shared.SubscriptionNextTransaction$.outboundSchema.optional(),
            items: z.array(shared.ItemSubscription$.outboundSchema).optional(),
            managementUrls: shared.SubscriptionManagementUrls$.outboundSchema.optional(),
            nextBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            nextTransaction: shared.SubscriptionNextTransaction$.outboundSchema.optional(),
            pausedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            recurringTransactionDetails:
                shared.SubscriptionRecurringTransactionDetails$.outboundSchema.optional(),
            scheduledChange: shared.SubscriptionScheduledChange$.outboundSchema.optional(),
            startedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: shared.SchemaStatusSubscription$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.billingCycle === undefined ? null : { billing_cycle: v.billingCycle }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.canceledAt === undefined ? null : { canceled_at: v.canceledAt }),
                collection_mode: v.collectionMode,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.currentBillingPeriod === undefined
                    ? null
                    : { current_billing_period: v.currentBillingPeriod }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.firstBilledAt === undefined ? null : { first_billed_at: v.firstBilledAt }),
                ...(v.immediateTransaction === undefined
                    ? null
                    : { immediate_transaction: v.immediateTransaction }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.managementUrls === undefined ? null : { management_urls: v.managementUrls }),
                ...(v.nextBilledAt === undefined ? null : { next_billed_at: v.nextBilledAt }),
                ...(v.nextTransaction === undefined
                    ? null
                    : { next_transaction: v.nextTransaction }),
                ...(v.pausedAt === undefined ? null : { paused_at: v.pausedAt }),
                ...(v.recurringTransactionDetails === undefined
                    ? null
                    : { recurring_transaction_details: v.recurringTransactionDetails }),
                ...(v.scheduledChange === undefined
                    ? null
                    : { scheduled_change: v.scheduledChange }),
                ...(v.startedAt === undefined ? null : { started_at: v.startedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace PreviewSubscriptionResponseBody$ {
    export type Inbound = {
        data: PreviewSubscriptionSubscriptionPreview$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<PreviewSubscriptionResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.lazy(() => PreviewSubscriptionSubscriptionPreview$.inboundSchema),
                meta: shared.Meta$.inboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                    meta: v.meta,
                };
            });

    export type Outbound = {
        data: PreviewSubscriptionSubscriptionPreview$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PreviewSubscriptionResponseBody
    > = z
        .object({
            data: z.lazy(() => PreviewSubscriptionSubscriptionPreview$.outboundSchema),
            meta: shared.Meta$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace PreviewSubscriptionResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PreviewSubscriptionResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PreviewSubscriptionResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PreviewSubscriptionResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PreviewSubscriptionResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PreviewSubscriptionResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PreviewSubscriptionResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
