/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ListInvoicesRequest = {
    /**
     * Return entities after the specified cursor. Used for working through paginated results.
     */
    after?: string | undefined;
    /**
     * Return only the IDs specified. Use a comma separated list to get multiple entities.
     */
    id?: string | undefined;
    /**
     * Set how many entities are returned per page.
     */
    perPage?: number | undefined;
    search?: string | undefined;
    /**
     * Return entities that match the specified status. Use a comma separated list to specify multiple status values.
     */
    status?: shared.StatusInvoice | undefined;
};

/**
 * OK
 */
export type ListInvoicesResponseBody = {
    data: Array<shared.Invoice>;
    /**
     * Information about this response.
     */
    meta: shared.MetaPaginated;
};

export type ListInvoicesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: ListInvoicesResponseBody | undefined;
};

/** @internal */
export namespace ListInvoicesRequest$ {
    export type Inbound = {
        after?: string | undefined;
        id?: string | undefined;
        per_page?: number | undefined;
        search?: string | undefined;
        status?: shared.StatusInvoice | undefined;
    };

    export const inboundSchema: z.ZodType<ListInvoicesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            after: z.string().optional(),
            id: z.string().optional(),
            per_page: z.number().int().default(10),
            search: z.string().optional(),
            status: shared.StatusInvoice$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.per_page === undefined ? null : { perPage: v.per_page }),
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        after?: string | undefined;
        id?: string | undefined;
        per_page: number;
        search?: string | undefined;
        status?: shared.StatusInvoice | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListInvoicesRequest> = z
        .object({
            after: z.string().optional(),
            id: z.string().optional(),
            perPage: z.number().int().default(10),
            search: z.string().optional(),
            status: shared.StatusInvoice$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.id === undefined ? null : { id: v.id }),
                per_page: v.perPage,
                ...(v.search === undefined ? null : { search: v.search }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace ListInvoicesResponseBody$ {
    export type Inbound = {
        data: Array<shared.Invoice$.Inbound>;
        meta: shared.MetaPaginated$.Inbound;
    };

    export const inboundSchema: z.ZodType<ListInvoicesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(shared.Invoice$.inboundSchema),
            meta: shared.MetaPaginated$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: Array<shared.Invoice$.Outbound>;
        meta: shared.MetaPaginated$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListInvoicesResponseBody> = z
        .object({
            data: z.array(shared.Invoice$.outboundSchema),
            meta: shared.MetaPaginated$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace ListInvoicesResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: ListInvoicesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListInvoicesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListInvoicesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: ListInvoicesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListInvoicesResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListInvoicesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
