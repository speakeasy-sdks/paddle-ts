/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type ListProductsRequest = {
    /**
     * Return entities after the specified cursor. Used for working through paginated results.
     */
    after?: string | undefined;
    /**
     * Return only the IDs specified. Use a comma separated list to get multiple entities.
     */
    id?: string | undefined;
    /**
     * Include related entities in the response.
     */
    include?: shared.IncludeProduct | undefined;
    /**
     * Order returned entities by the specified field and direction (`[ASC]` or `[DESC]`).
     */
    orderBy?: string | undefined;
    /**
     * Set how many entities are returned per page.
     */
    perPage?: number | undefined;
    /**
     * Return entities that match the specified status. Use a comma separated list to specify multiple status values.
     */
    status?: shared.Status | undefined;
    /**
     * Return entities that match the specified tax category.
     */
    taxCategory?: shared.TaxCategory | undefined;
};

/**
 * OK
 */
export type ListProductsResponseBody = {
    data: Array<shared.ProductIncludes>;
    /**
     * Information about this response.
     */
    meta: shared.MetaPaginated;
};

export type ListProductsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: ListProductsResponseBody | undefined;
};

/** @internal */
export namespace ListProductsRequest$ {
    export type Inbound = {
        after?: string | undefined;
        id?: string | undefined;
        include?: shared.IncludeProduct | undefined;
        order_by?: string | undefined;
        per_page?: number | undefined;
        status?: shared.Status | undefined;
        tax_category?: shared.TaxCategory | undefined;
    };

    export const inboundSchema: z.ZodType<ListProductsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            after: z.string().optional(),
            id: z.string().optional(),
            include: shared.IncludeProduct$.optional(),
            order_by: z.string().default("id[ASC]"),
            per_page: z.number().int().default(10),
            status: shared.Status$.default(shared.Status.Active),
            tax_category: shared.TaxCategory$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.include === undefined ? null : { include: v.include }),
                ...(v.order_by === undefined ? null : { orderBy: v.order_by }),
                ...(v.per_page === undefined ? null : { perPage: v.per_page }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax_category === undefined ? null : { taxCategory: v.tax_category }),
            };
        });

    export type Outbound = {
        after?: string | undefined;
        id?: string | undefined;
        include?: shared.IncludeProduct | undefined;
        order_by: string;
        per_page: number;
        status: shared.Status;
        tax_category?: shared.TaxCategory | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProductsRequest> = z
        .object({
            after: z.string().optional(),
            id: z.string().optional(),
            include: shared.IncludeProduct$.optional(),
            orderBy: z.string().default("id[ASC]"),
            perPage: z.number().int().default(10),
            status: shared.Status$.default(shared.Status.Active),
            taxCategory: shared.TaxCategory$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.after === undefined ? null : { after: v.after }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.include === undefined ? null : { include: v.include }),
                order_by: v.orderBy,
                per_page: v.perPage,
                status: v.status,
                ...(v.taxCategory === undefined ? null : { tax_category: v.taxCategory }),
            };
        });
}

/** @internal */
export namespace ListProductsResponseBody$ {
    export type Inbound = {
        data: Array<shared.ProductIncludes$.Inbound>;
        meta: shared.MetaPaginated$.Inbound;
    };

    export const inboundSchema: z.ZodType<ListProductsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(shared.ProductIncludes$.inboundSchema),
            meta: shared.MetaPaginated$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: Array<shared.ProductIncludes$.Outbound>;
        meta: shared.MetaPaginated$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProductsResponseBody> = z
        .object({
            data: z.array(shared.ProductIncludes$.outboundSchema),
            meta: shared.MetaPaginated$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace ListProductsResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: ListProductsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListProductsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListProductsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: ListProductsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListProductsResponse> = z
        .object({
            contentType: z.string(),
            headers: z.record(z.array(z.string())),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListProductsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                Headers: v.headers,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
