/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetTransactionInvoiceRequest = {
    /**
     * Paddle ID of the transaction entity to work with.
     */
    transactionId: string;
};

export type GetTransactionInvoiceData = {
    /**
     * URL of the requested resource.
     */
    url?: string | undefined;
};

/**
 * OK
 */
export type GetTransactionInvoiceResponseBody = {
    data: GetTransactionInvoiceData;
    /**
     * Information about this response.
     */
    meta: shared.Meta;
};

export type GetTransactionInvoiceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    headers: Record<string, Array<string>>;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: GetTransactionInvoiceResponseBody | undefined;
};

/** @internal */
export namespace GetTransactionInvoiceRequest$ {
    export type Inbound = {
        transaction_id: string;
    };

    export const inboundSchema: z.ZodType<GetTransactionInvoiceRequest, z.ZodTypeDef, Inbound> = z
        .object({
            transaction_id: z.string(),
        })
        .transform((v) => {
            return {
                transactionId: v.transaction_id,
            };
        });

    export type Outbound = {
        transaction_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionInvoiceRequest> = z
        .object({
            transactionId: z.string(),
        })
        .transform((v) => {
            return {
                transaction_id: v.transactionId,
            };
        });
}

/** @internal */
export namespace GetTransactionInvoiceData$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransactionInvoiceData, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionInvoiceData> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace GetTransactionInvoiceResponseBody$ {
    export type Inbound = {
        data: GetTransactionInvoiceData$.Inbound;
        meta: shared.Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        GetTransactionInvoiceResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => GetTransactionInvoiceData$.inboundSchema),
            meta: shared.Meta$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });

    export type Outbound = {
        data: GetTransactionInvoiceData$.Outbound;
        meta: shared.Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTransactionInvoiceResponseBody
    > = z
        .object({
            data: z.lazy(() => GetTransactionInvoiceData$.outboundSchema),
            meta: shared.Meta$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace GetTransactionInvoiceResponse$ {
    export type Inbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: Response;
        object?: GetTransactionInvoiceResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTransactionInvoiceResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Headers: z.record(z.array(z.string())),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTransactionInvoiceResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                headers: v.Headers,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        Headers: Record<string, Array<string>>;
        StatusCode: number;
        RawResponse: never;
        object?: GetTransactionInvoiceResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTransactionInvoiceResponse> =
        z
            .object({
                contentType: z.string(),
                headers: z.record(z.array(z.string())),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => GetTransactionInvoiceResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    Headers: v.headers,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
