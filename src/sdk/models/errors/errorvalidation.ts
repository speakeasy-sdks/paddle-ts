/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../../internal/utils";
import { classToPlain, Expose, Type } from "class-transformer";

export class ErrorValidationErrors extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "field" })
    field: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message: string;

    constructor(err?: ErrorValidationErrors) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "ErrorValidationErrors";
        Object.setPrototypeOf(this, ErrorValidationErrors.prototype);
    }
}

export class ErrorValidation extends Error {
    @SpeakeasyMetadata()
    @Expose({ name: "code" })
    code: string;

    @SpeakeasyMetadata()
    @Expose({ name: "detail" })
    detail: string;

    @SpeakeasyMetadata()
    @Expose({ name: "documentation_url" })
    documentationUrl: string;

    @SpeakeasyMetadata({ elemType: ErrorValidationErrors })
    @Expose({ name: "errors" })
    @Type(() => ErrorValidationErrors)
    errors: ErrorValidationErrors[];

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: string;

    constructor(err?: ErrorValidation) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "ErrorValidation";
        Object.setPrototypeOf(this, ErrorValidation.prototype);
    }
}
