/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AddressPreview, AddressPreview$ } from "./addresspreview";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import {
    TransactionPricingPreviewItem,
    TransactionPricingPreviewItem$,
} from "./transactionpricingpreviewitem";
import { z } from "zod";

export type TransactionPricingPreview = {
    /**
     * Represents an address entity.
     */
    address?: AddressPreview | undefined;
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * IP address for this transaction preview. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
     */
    customerIpAddress?: string | null | undefined;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    discountId?: string | undefined;
    /**
     * List of items to preview price calculations for.
     */
    items: Array<TransactionPricingPreviewItem>;
};

/** @internal */
export namespace TransactionPricingPreview$ {
    export type Inbound = {
        address?: AddressPreview$.Inbound | undefined;
        address_id?: string | undefined;
        business_id?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        customer_ip_address?: string | null | undefined;
        discount_id?: string | undefined;
        items: Array<TransactionPricingPreviewItem$.Inbound>;
    };

    export const inboundSchema: z.ZodType<TransactionPricingPreview, z.ZodTypeDef, Inbound> = z
        .object({
            address: AddressPreview$.inboundSchema.optional(),
            address_id: z.string().optional(),
            business_id: z.string().optional(),
            currency_code: CurrencyCode2$.optional(),
            customer_id: z.string().optional(),
            customer_ip_address: z.nullable(z.string()).optional(),
            discount_id: z.string().optional(),
            items: z.array(TransactionPricingPreviewItem$.inboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.customer_ip_address === undefined
                    ? null
                    : { customerIpAddress: v.customer_ip_address }),
                ...(v.discount_id === undefined ? null : { discountId: v.discount_id }),
                items: v.items,
            };
        });

    export type Outbound = {
        address?: AddressPreview$.Outbound | undefined;
        address_id?: string | undefined;
        business_id?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        customer_ip_address?: string | null | undefined;
        discount_id?: string | undefined;
        items: Array<TransactionPricingPreviewItem$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPricingPreview> = z
        .object({
            address: AddressPreview$.outboundSchema.optional(),
            addressId: z.string().optional(),
            businessId: z.string().optional(),
            currencyCode: CurrencyCode2$.optional(),
            customerId: z.string().optional(),
            customerIpAddress: z.nullable(z.string()).optional(),
            discountId: z.string().optional(),
            items: z.array(TransactionPricingPreviewItem$.outboundSchema),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.customerIpAddress === undefined
                    ? null
                    : { customer_ip_address: v.customerIpAddress }),
                ...(v.discountId === undefined ? null : { discount_id: v.discountId }),
                items: v.items,
            };
        });
}
