/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PriceQuantity = {
    /**
     * Maximum quantity of the product related to this price that can be bought. Required if `minimum` set. Must be greater than the `minimum` value.
     */
    maximum?: number | undefined;
    /**
     * Minimum quantity of the product related to this price that can be bought. Required if `maximum` set.
     */
    minimum?: number | undefined;
};

/** @internal */
export namespace PriceQuantity$ {
    export type Inbound = {
        maximum?: number | undefined;
        minimum?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PriceQuantity, z.ZodTypeDef, Inbound> = z
        .object({
            maximum: z.number().int().default(100),
            minimum: z.number().int().default(1),
        })
        .transform((v) => {
            return {
                ...(v.maximum === undefined ? null : { maximum: v.maximum }),
                ...(v.minimum === undefined ? null : { minimum: v.minimum }),
            };
        });

    export type Outbound = {
        maximum: number;
        minimum: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PriceQuantity> = z
        .object({
            maximum: z.number().int().default(100),
            minimum: z.number().int().default(1),
        })
        .transform((v) => {
            return {
                maximum: v.maximum,
                minimum: v.minimum,
            };
        });
}
