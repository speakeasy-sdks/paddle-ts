/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Price, Price$ } from "./price";
import { Product, Product$ } from "./product";
import { Totals2, Totals2$ } from "./totals2";
import { TotalsFormatted, TotalsFormatted$ } from "./totalsformatted";
import {
    TransactionPricingPreviewLineItemDiscount,
    TransactionPricingPreviewLineItemDiscount$,
} from "./transactionpricingpreviewlineitemdiscount";
import { UnitTotals, UnitTotals$ } from "./unittotals";
import { UnitTotalsFormatted, UnitTotalsFormatted$ } from "./unittotalsformatted";
import { z } from "zod";

/**
 * Information about line items for this preview. Includes totals calculated by Paddle. Considered the source of truth for line item totals.
 */
export type TransactionPricingPreviewLineItem = {
    /**
     * Array of discounts applied to this preview line item. Empty if no discounts applied.
     */
    discounts?: TransactionPricingPreviewLineItemDiscount | undefined;
    /**
     * The financial breakdown of a charge in the format of a given currency.
     */
    formattedTotals?: TotalsFormatted | undefined;
    /**
     * Breakdown of the charge for one unit in the format of a given currency.
     */
    formattedUnitTotals?: UnitTotalsFormatted | undefined;
    /**
     * Represents a price entity.
     */
    price?: Price | undefined;
    /**
     * Represents a product entity.
     */
    product?: Product | undefined;
    /**
     * Quantity of this preview line item.
     */
    quantity?: number | undefined;
    /**
     * Rate used to calculate tax for this preview line item.
     */
    taxRate?: string | undefined;
    /**
     * The financial breakdown of a charge in the lowest denomination of a currency (eg cents for USD).
     */
    totals?: Totals2 | undefined;
    /**
     * Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
     */
    unitTotals?: UnitTotals | undefined;
};

/** @internal */
export namespace TransactionPricingPreviewLineItem$ {
    export type Inbound = {
        discounts?: TransactionPricingPreviewLineItemDiscount$.Inbound | undefined;
        formatted_totals?: TotalsFormatted$.Inbound | undefined;
        formatted_unit_totals?: UnitTotalsFormatted$.Inbound | undefined;
        price?: Price$.Inbound | undefined;
        product?: Product$.Inbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals2$.Inbound | undefined;
        unit_totals?: UnitTotals$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        TransactionPricingPreviewLineItem,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            discounts: TransactionPricingPreviewLineItemDiscount$.inboundSchema.optional(),
            formatted_totals: TotalsFormatted$.inboundSchema.optional(),
            formatted_unit_totals: UnitTotalsFormatted$.inboundSchema.optional(),
            price: Price$.inboundSchema.optional(),
            product: Product$.inboundSchema.optional(),
            quantity: z.number().optional(),
            tax_rate: z.string().optional(),
            totals: Totals2$.inboundSchema.optional(),
            unit_totals: UnitTotals$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.formatted_totals === undefined
                    ? null
                    : { formattedTotals: v.formatted_totals }),
                ...(v.formatted_unit_totals === undefined
                    ? null
                    : { formattedUnitTotals: v.formatted_unit_totals }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unit_totals === undefined ? null : { unitTotals: v.unit_totals }),
            };
        });

    export type Outbound = {
        discounts?: TransactionPricingPreviewLineItemDiscount$.Outbound | undefined;
        formatted_totals?: TotalsFormatted$.Outbound | undefined;
        formatted_unit_totals?: UnitTotalsFormatted$.Outbound | undefined;
        price?: Price$.Outbound | undefined;
        product?: Product$.Outbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals2$.Outbound | undefined;
        unit_totals?: UnitTotals$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPricingPreviewLineItem
    > = z
        .object({
            discounts: TransactionPricingPreviewLineItemDiscount$.outboundSchema.optional(),
            formattedTotals: TotalsFormatted$.outboundSchema.optional(),
            formattedUnitTotals: UnitTotalsFormatted$.outboundSchema.optional(),
            price: Price$.outboundSchema.optional(),
            product: Product$.outboundSchema.optional(),
            quantity: z.number().optional(),
            taxRate: z.string().optional(),
            totals: Totals2$.outboundSchema.optional(),
            unitTotals: UnitTotals$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.formattedTotals === undefined
                    ? null
                    : { formatted_totals: v.formattedTotals }),
                ...(v.formattedUnitTotals === undefined
                    ? null
                    : { formatted_unit_totals: v.formattedUnitTotals }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unitTotals === undefined ? null : { unit_totals: v.unitTotals }),
            };
        });
}
