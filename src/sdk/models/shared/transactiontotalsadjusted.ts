/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { z } from "zod";

/**
 * Breakdown of the payout totals for a transaction after adjustments. `null` until the transaction is `completed`.
 */
export type TransactionTotalsAdjusted = {
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Total earnings for this transaction. This is the total minus the Paddle fee.
     *
     * @remarks
     * `null` until the transaction is `completed` and the fee is processed.
     */
    earnings?: string | null | undefined;
    /**
     * Total fee taken by Paddle for this transaction. `null` until the transaction is `completed` and the fee is processed.
     */
    fee?: string | null | undefined;
    /**
     * Total due after credits but before any payments.
     */
    grandTotal?: string | undefined;
    /**
     * Subtotal before discount, tax, and deductions. If an item, unit price multiplied by quantity.
     */
    subtotal?: string | undefined;
    /**
     * Total tax on the subtotal.
     */
    tax?: string | undefined;
    /**
     * Total after tax.
     */
    total?: string | undefined;
};

/** @internal */
export namespace TransactionTotalsAdjusted$ {
    export type Inbound = {
        currency_code?: CurrencyCode2 | undefined;
        earnings?: string | null | undefined;
        fee?: string | null | undefined;
        grand_total?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionTotalsAdjusted, z.ZodTypeDef, Inbound> = z
        .object({
            currency_code: CurrencyCode2$.optional(),
            earnings: z.nullable(z.string()).optional(),
            fee: z.nullable(z.string()).optional(),
            grand_total: z.string().optional(),
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.earnings === undefined ? null : { earnings: v.earnings }),
                ...(v.fee === undefined ? null : { fee: v.fee }),
                ...(v.grand_total === undefined ? null : { grandTotal: v.grand_total }),
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        currency_code?: CurrencyCode2 | undefined;
        earnings?: string | null | undefined;
        fee?: string | null | undefined;
        grand_total?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionTotalsAdjusted> = z
        .object({
            currencyCode: CurrencyCode2$.optional(),
            earnings: z.nullable(z.string()).optional(),
            fee: z.nullable(z.string()).optional(),
            grandTotal: z.string().optional(),
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.earnings === undefined ? null : { earnings: v.earnings }),
                ...(v.fee === undefined ? null : { fee: v.fee }),
                ...(v.grandTotal === undefined ? null : { grand_total: v.grandTotal }),
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
