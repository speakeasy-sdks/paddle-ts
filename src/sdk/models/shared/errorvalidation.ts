/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Errors = {
    field: string;
    message: string;
};

export type ErrorValidation = {
    code: string;
    detail: string;
    documentationUrl: string;
    errors: Array<Errors>;
    type: string;
};

/** @internal */
export namespace Errors$ {
    export type Inbound = {
        field: string;
        message: string;
    };

    export const inboundSchema: z.ZodType<Errors, z.ZodTypeDef, Inbound> = z
        .object({
            field: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                field: v.field,
                message: v.message,
            };
        });

    export type Outbound = {
        field: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Errors> = z
        .object({
            field: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                field: v.field,
                message: v.message,
            };
        });
}

/** @internal */
export namespace ErrorValidation$ {
    export type Inbound = {
        code: string;
        detail: string;
        documentation_url: string;
        errors: Array<Errors$.Inbound>;
        type: string;
    };

    export const inboundSchema: z.ZodType<ErrorValidation, z.ZodTypeDef, Inbound> = z
        .object({
            code: z.string(),
            detail: z.string(),
            documentation_url: z.string(),
            errors: z.array(z.lazy(() => Errors$.inboundSchema)),
            type: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                detail: v.detail,
                documentationUrl: v.documentation_url,
                errors: v.errors,
                type: v.type,
            };
        });

    export type Outbound = {
        code: string;
        detail: string;
        documentation_url: string;
        errors: Array<Errors$.Outbound>;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorValidation> = z
        .object({
            code: z.string(),
            detail: z.string(),
            documentationUrl: z.string(),
            errors: z.array(z.lazy(() => Errors$.outboundSchema)),
            type: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                detail: v.detail,
                documentation_url: v.documentationUrl,
                errors: v.errors,
                type: v.type,
            };
        });
}
