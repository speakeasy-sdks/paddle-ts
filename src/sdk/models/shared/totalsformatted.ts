/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * The financial breakdown of a charge in the format of a given currency.
 */
export type TotalsFormatted = {
    /**
     * The amount discounted due to a discount code or ID being applied.
     *
     * @remarks
     *
     * Except for percentage discounts, Paddle applies tax to discounts based on the line item `price.tax_mode`. If `price.tax_mode` for a line item is `internal`, Paddle removes tax from the discount applied.
     */
    discount?: string | undefined;
    /**
     * The amount times the quantity.
     */
    subtotal?: string | undefined;
    /**
     * The amount of tax due on the subtotal.
     */
    tax?: string | undefined;
    /**
     * The subtotal - discount + tax.
     */
    total?: string | undefined;
};

/** @internal */
export namespace TotalsFormatted$ {
    export type Inbound = {
        discount?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TotalsFormatted, z.ZodTypeDef, Inbound> = z
        .object({
            discount: z.string().optional(),
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        discount?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TotalsFormatted> = z
        .object({
            discount: z.string().optional(),
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
