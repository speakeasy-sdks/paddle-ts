/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomData, CustomData$ } from "./customdata";
import { Price, Price$ } from "./price";
import { TaxCategory1, TaxCategory1$ } from "./taxcategory1";
import { z } from "zod";

/**
 * Represents a product entity with included entities.
 */
export type ProductIncludes = {
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: CustomData | null | undefined;
    /**
     * Short description for this product. Included in the checkout and on some customer documents.
     */
    description?: string | null | undefined;
    /**
     * Unique Paddle ID for this product, prefixed with `pro_`.
     */
    id?: string | undefined;
    /**
     * Image for this product. Included in the checkout and on some customer documents.
     */
    imageUrl?: string | null | undefined;
    /**
     * Name of this product.
     */
    name?: string | undefined;
    /**
     * Prices for this product. Returned when the `include` parameter is used.
     */
    prices?: Array<Price> | undefined;
    status?: any | undefined;
    /**
     * Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account.
     */
    taxCategory?: TaxCategory1 | undefined;
};

/** @internal */
export namespace ProductIncludes$ {
    export type Inbound = {
        created_at?: string | undefined;
        custom_data?: CustomData$.Inbound | null | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        image_url?: string | null | undefined;
        name?: string | undefined;
        prices?: Array<Price$.Inbound> | undefined;
        status?: any | undefined;
        tax_category?: TaxCategory1 | undefined;
    };

    export const inboundSchema: z.ZodType<ProductIncludes, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            custom_data: z.nullable(CustomData$.inboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            image_url: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            prices: z.array(Price$.inboundSchema).optional(),
            status: z.any().optional(),
            tax_category: TaxCategory1$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.image_url === undefined ? null : { imageUrl: v.image_url }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax_category === undefined ? null : { taxCategory: v.tax_category }),
            };
        });

    export type Outbound = {
        created_at?: string | undefined;
        custom_data?: CustomData$.Outbound | null | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        image_url?: string | null | undefined;
        name?: string | undefined;
        prices?: Array<Price$.Outbound> | undefined;
        status?: any | undefined;
        tax_category?: TaxCategory1 | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductIncludes> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            customData: z.nullable(CustomData$.outboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            imageUrl: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            prices: z.array(Price$.outboundSchema).optional(),
            status: z.any().optional(),
            taxCategory: TaxCategory1$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.imageUrl === undefined ? null : { image_url: v.imageUrl }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.prices === undefined ? null : { prices: v.prices }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.taxCategory === undefined ? null : { tax_category: v.taxCategory }),
            };
        });
}
