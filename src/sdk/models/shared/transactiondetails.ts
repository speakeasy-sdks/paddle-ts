/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Product, Product$ } from "./product";
import { Totals1, Totals1$ } from "./totals1";
import { TransactionItemProration, TransactionItemProration$ } from "./transactionitemproration";
import { TransactionPayoutTotals, TransactionPayoutTotals$ } from "./transactionpayouttotals";
import {
    TransactionPayoutTotalsAdjusted,
    TransactionPayoutTotalsAdjusted$,
} from "./transactionpayouttotalsadjusted";
import { TransactionTotals, TransactionTotals$ } from "./transactiontotals";
import { TransactionTotalsAdjusted, TransactionTotalsAdjusted$ } from "./transactiontotalsadjusted";
import { UnitTotals, UnitTotals$ } from "./unittotals";
import { z } from "zod";

/**
 * Information about line items for this transaction. Different from transaction `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
 */
export type TransactionLineItem = {
    /**
     * Unique Paddle ID for this transaction item, prefixed with `txnitm_`.
     */
    id?: string | undefined;
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId?: string | undefined;
    /**
     * Represents a product entity.
     */
    product?: Product | undefined;
    /**
     * How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
     */
    proration?: TransactionItemProration | undefined;
    /**
     * Quantity of this transaction line item.
     */
    quantity?: number | undefined;
    /**
     * Rate used to calculate tax for this transaction line item.
     */
    taxRate?: string | undefined;
    /**
     * Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
     */
    totals?: Totals1 | undefined;
    /**
     * Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
     */
    unitTotals?: UnitTotals | undefined;
};

export type TransactionDetailsTaxRatesUsed = {
    /**
     * Rate used to calculate tax for this transaction.
     */
    taxRate?: string | undefined;
    /**
     * Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
     */
    totals?: Totals1 | undefined;
};

/**
 * Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
 */
export type TransactionDetails = {
    /**
     * Breakdown of the payout total for a transaction after adjustments. `null` until the transaction is `completed`.
     */
    adjustedPayoutTotals?: TransactionPayoutTotalsAdjusted | undefined;
    /**
     * Breakdown of the payout totals for a transaction after adjustments. `null` until the transaction is `completed`.
     */
    adjustedTotals?: TransactionTotalsAdjusted | undefined;
    /**
     * Information about line items for this transaction. Different from transaction `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
     */
    lineItems?: Array<TransactionLineItem> | undefined;
    /**
     * Breakdown of the payout total for a transaction. `null` until the transaction is `completed`. Returned in your payout currency.
     */
    payoutTotals?: TransactionPayoutTotals | undefined;
    /**
     * List of tax rates applied for this transaction.
     */
    taxRatesUsed?: Array<TransactionDetailsTaxRatesUsed> | undefined;
    /**
     * Breakdown of the total for a transaction.
     */
    totals?: TransactionTotals | undefined;
};

/** @internal */
export namespace TransactionLineItem$ {
    export type Inbound = {
        id?: string | undefined;
        price_id?: string | undefined;
        product?: Product$.Inbound | undefined;
        proration?: TransactionItemProration$.Inbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals1$.Inbound | undefined;
        unit_totals?: UnitTotals$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionLineItem, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            price_id: z.string().optional(),
            product: Product$.inboundSchema.optional(),
            proration: TransactionItemProration$.inboundSchema.optional(),
            quantity: z.number().optional(),
            tax_rate: z.string().optional(),
            totals: Totals1$.inboundSchema.optional(),
            unit_totals: UnitTotals$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.price_id === undefined ? null : { priceId: v.price_id }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.proration === undefined ? null : { proration: v.proration }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unit_totals === undefined ? null : { unitTotals: v.unit_totals }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        price_id?: string | undefined;
        product?: Product$.Outbound | undefined;
        proration?: TransactionItemProration$.Outbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals1$.Outbound | undefined;
        unit_totals?: UnitTotals$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionLineItem> = z
        .object({
            id: z.string().optional(),
            priceId: z.string().optional(),
            product: Product$.outboundSchema.optional(),
            proration: TransactionItemProration$.outboundSchema.optional(),
            quantity: z.number().optional(),
            taxRate: z.string().optional(),
            totals: Totals1$.outboundSchema.optional(),
            unitTotals: UnitTotals$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.priceId === undefined ? null : { price_id: v.priceId }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.proration === undefined ? null : { proration: v.proration }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unitTotals === undefined ? null : { unit_totals: v.unitTotals }),
            };
        });
}

/** @internal */
export namespace TransactionDetailsTaxRatesUsed$ {
    export type Inbound = {
        tax_rate?: string | undefined;
        totals?: Totals1$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionDetailsTaxRatesUsed, z.ZodTypeDef, Inbound> = z
        .object({
            tax_rate: z.string().optional(),
            totals: Totals1$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });

    export type Outbound = {
        tax_rate?: string | undefined;
        totals?: Totals1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionDetailsTaxRatesUsed> =
        z
            .object({
                taxRate: z.string().optional(),
                totals: Totals1$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                    ...(v.totals === undefined ? null : { totals: v.totals }),
                };
            });
}

/** @internal */
export namespace TransactionDetails$ {
    export type Inbound = {
        adjusted_payout_totals?: TransactionPayoutTotalsAdjusted$.Inbound | undefined;
        adjusted_totals?: TransactionTotalsAdjusted$.Inbound | undefined;
        line_items?: Array<TransactionLineItem$.Inbound> | undefined;
        payout_totals?: TransactionPayoutTotals$.Inbound | undefined;
        tax_rates_used?: Array<TransactionDetailsTaxRatesUsed$.Inbound> | undefined;
        totals?: TransactionTotals$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionDetails, z.ZodTypeDef, Inbound> = z
        .object({
            adjusted_payout_totals: TransactionPayoutTotalsAdjusted$.inboundSchema.optional(),
            adjusted_totals: TransactionTotalsAdjusted$.inboundSchema.optional(),
            line_items: z.array(z.lazy(() => TransactionLineItem$.inboundSchema)).optional(),
            payout_totals: TransactionPayoutTotals$.inboundSchema.optional(),
            tax_rates_used: z
                .array(z.lazy(() => TransactionDetailsTaxRatesUsed$.inboundSchema))
                .optional(),
            totals: TransactionTotals$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjusted_payout_totals === undefined
                    ? null
                    : { adjustedPayoutTotals: v.adjusted_payout_totals }),
                ...(v.adjusted_totals === undefined ? null : { adjustedTotals: v.adjusted_totals }),
                ...(v.line_items === undefined ? null : { lineItems: v.line_items }),
                ...(v.payout_totals === undefined ? null : { payoutTotals: v.payout_totals }),
                ...(v.tax_rates_used === undefined ? null : { taxRatesUsed: v.tax_rates_used }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });

    export type Outbound = {
        adjusted_payout_totals?: TransactionPayoutTotalsAdjusted$.Outbound | undefined;
        adjusted_totals?: TransactionTotalsAdjusted$.Outbound | undefined;
        line_items?: Array<TransactionLineItem$.Outbound> | undefined;
        payout_totals?: TransactionPayoutTotals$.Outbound | undefined;
        tax_rates_used?: Array<TransactionDetailsTaxRatesUsed$.Outbound> | undefined;
        totals?: TransactionTotals$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionDetails> = z
        .object({
            adjustedPayoutTotals: TransactionPayoutTotalsAdjusted$.outboundSchema.optional(),
            adjustedTotals: TransactionTotalsAdjusted$.outboundSchema.optional(),
            lineItems: z.array(z.lazy(() => TransactionLineItem$.outboundSchema)).optional(),
            payoutTotals: TransactionPayoutTotals$.outboundSchema.optional(),
            taxRatesUsed: z
                .array(z.lazy(() => TransactionDetailsTaxRatesUsed$.outboundSchema))
                .optional(),
            totals: TransactionTotals$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjustedPayoutTotals === undefined
                    ? null
                    : { adjusted_payout_totals: v.adjustedPayoutTotals }),
                ...(v.adjustedTotals === undefined ? null : { adjusted_totals: v.adjustedTotals }),
                ...(v.lineItems === undefined ? null : { line_items: v.lineItems }),
                ...(v.payoutTotals === undefined ? null : { payout_totals: v.payoutTotals }),
                ...(v.taxRatesUsed === undefined ? null : { tax_rates_used: v.taxRatesUsed }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });
}
