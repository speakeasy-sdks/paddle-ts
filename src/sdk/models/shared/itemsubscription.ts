/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Money2, Money2$ } from "./money2";
import { Period2, Period2$ } from "./period2";
import { TaxMode1, TaxMode1$ } from "./taxmode1";
import { TimePeriod, TimePeriod$ } from "./timeperiod";
import { z } from "zod";

/**
 * Price object for this item.
 */
export type ItemSubscriptionPrice = {
    billingCycle?: Period2 | undefined;
    /**
     * Short description for this price. Typically describes how often the related product bills.
     */
    description?: string | undefined;
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    id?: string | undefined;
    /**
     * Unique Paddle ID for this product, prefixed with `pro_`.
     */
    productId?: string | undefined;
    /**
     * How tax is calculated for this price.
     */
    taxMode?: TaxMode1 | undefined;
    trialPeriod?: Period2 | undefined;
    unitPrice?: Money2 | undefined;
};

/**
 * Status of this subscription item. Set automatically by Paddle.
 */
export enum ItemSubscriptionStatus {
    Active = "active",
    Inactive = "inactive",
    Trialing = "trialing",
}

/**
 * Represents a subscription item.
 */
export type ItemSubscription = {
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * RFC 3339 datetime string.
     */
    nextBilledAt?: Date | undefined;
    /**
     * RFC 3339 datetime string.
     */
    previouslyBilledAt?: Date | undefined;
    /**
     * Price object for this item.
     */
    price?: ItemSubscriptionPrice | undefined;
    /**
     * Quantity of this item on the subscription.
     */
    quantity?: number | undefined;
    /**
     * Whether this is a recurring item. `false` if one-time.
     */
    recurring?: boolean | undefined;
    /**
     * Status of this subscription item. Set automatically by Paddle.
     */
    status?: ItemSubscriptionStatus | undefined;
    trialDates?: TimePeriod | undefined;
    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace ItemSubscriptionPrice$ {
    export type Inbound = {
        billing_cycle?: Period2$.Inbound | undefined;
        description?: string | undefined;
        id?: string | undefined;
        product_id?: string | undefined;
        tax_mode?: TaxMode1 | undefined;
        trial_period?: Period2$.Inbound | undefined;
        unit_price?: Money2$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ItemSubscriptionPrice, z.ZodTypeDef, Inbound> = z
        .object({
            billing_cycle: Period2$.inboundSchema.optional(),
            description: z.string().optional(),
            id: z.string().optional(),
            product_id: z.string().optional(),
            tax_mode: TaxMode1$.default(TaxMode1.AccountSetting),
            trial_period: Period2$.inboundSchema.optional(),
            unit_price: Money2$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.billing_cycle === undefined ? null : { billingCycle: v.billing_cycle }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.product_id === undefined ? null : { productId: v.product_id }),
                ...(v.tax_mode === undefined ? null : { taxMode: v.tax_mode }),
                ...(v.trial_period === undefined ? null : { trialPeriod: v.trial_period }),
                ...(v.unit_price === undefined ? null : { unitPrice: v.unit_price }),
            };
        });

    export type Outbound = {
        billing_cycle?: Period2$.Outbound | undefined;
        description?: string | undefined;
        id?: string | undefined;
        product_id?: string | undefined;
        tax_mode: TaxMode1;
        trial_period?: Period2$.Outbound | undefined;
        unit_price?: Money2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ItemSubscriptionPrice> = z
        .object({
            billingCycle: Period2$.outboundSchema.optional(),
            description: z.string().optional(),
            id: z.string().optional(),
            productId: z.string().optional(),
            taxMode: TaxMode1$.default(TaxMode1.AccountSetting),
            trialPeriod: Period2$.outboundSchema.optional(),
            unitPrice: Money2$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.billingCycle === undefined ? null : { billing_cycle: v.billingCycle }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { product_id: v.productId }),
                tax_mode: v.taxMode,
                ...(v.trialPeriod === undefined ? null : { trial_period: v.trialPeriod }),
                ...(v.unitPrice === undefined ? null : { unit_price: v.unitPrice }),
            };
        });
}

/** @internal */
export const ItemSubscriptionStatus$ = z.nativeEnum(ItemSubscriptionStatus);

/** @internal */
export namespace ItemSubscription$ {
    export type Inbound = {
        created_at?: string | undefined;
        next_billed_at?: string | undefined;
        previously_billed_at?: string | undefined;
        price?: ItemSubscriptionPrice$.Inbound | undefined;
        quantity?: number | undefined;
        recurring?: boolean | undefined;
        status?: ItemSubscriptionStatus | undefined;
        trial_dates?: TimePeriod$.Inbound | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ItemSubscription, z.ZodTypeDef, Inbound> = z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            next_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            previously_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            price: z.lazy(() => ItemSubscriptionPrice$.inboundSchema).optional(),
            quantity: z.number().optional(),
            recurring: z.boolean().optional(),
            status: ItemSubscriptionStatus$.optional(),
            trial_dates: TimePeriod$.inboundSchema.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.next_billed_at === undefined ? null : { nextBilledAt: v.next_billed_at }),
                ...(v.previously_billed_at === undefined
                    ? null
                    : { previouslyBilledAt: v.previously_billed_at }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.recurring === undefined ? null : { recurring: v.recurring }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.trial_dates === undefined ? null : { trialDates: v.trial_dates }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        created_at?: string | undefined;
        next_billed_at?: string | undefined;
        previously_billed_at?: string | undefined;
        price?: ItemSubscriptionPrice$.Outbound | undefined;
        quantity?: number | undefined;
        recurring?: boolean | undefined;
        status?: ItemSubscriptionStatus | undefined;
        trial_dates?: TimePeriod$.Outbound | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ItemSubscription> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            nextBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            previouslyBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            price: z.lazy(() => ItemSubscriptionPrice$.outboundSchema).optional(),
            quantity: z.number().optional(),
            recurring: z.boolean().optional(),
            status: ItemSubscriptionStatus$.optional(),
            trialDates: TimePeriod$.outboundSchema.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.nextBilledAt === undefined ? null : { next_billed_at: v.nextBilledAt }),
                ...(v.previouslyBilledAt === undefined
                    ? null
                    : { previously_billed_at: v.previouslyBilledAt }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.recurring === undefined ? null : { recurring: v.recurring }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.trialDates === undefined ? null : { trial_dates: v.trialDates }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
