/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Keys used for working with paginated results.
 */
export type Pagination2 = {
    /**
     * Estimated number of entities for this response.
     */
    estimatedTotal: number;
    /**
     * Whether this response has another page.
     */
    hasMore: boolean;
    /**
     * URL containing the query parameters of the original request, along with the `after` parameter that marks the starting point of the next page. Always returned, even if `has_more` is `false`.
     */
    next: string;
    /**
     * Number of entities per page for this response. May differ from the number requested if the requested number is too high.
     */
    perPage?: number | undefined;
};

/** @internal */
export namespace Pagination2$ {
    export type Inbound = {
        estimated_total: number;
        has_more: boolean;
        next: string;
        per_page?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Pagination2, z.ZodTypeDef, Inbound> = z
        .object({
            estimated_total: z.number().int(),
            has_more: z.boolean(),
            next: z.string(),
            per_page: z.number().int().default(10),
        })
        .transform((v) => {
            return {
                estimatedTotal: v.estimated_total,
                hasMore: v.has_more,
                next: v.next,
                ...(v.per_page === undefined ? null : { perPage: v.per_page }),
            };
        });

    export type Outbound = {
        estimated_total: number;
        has_more: boolean;
        next: string;
        per_page: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pagination2> = z
        .object({
            estimatedTotal: z.number().int(),
            hasMore: z.boolean(),
            next: z.string(),
            perPage: z.number().int().default(10),
        })
        .transform((v) => {
            return {
                estimated_total: v.estimatedTotal,
                has_more: v.hasMore,
                next: v.next,
                per_page: v.perPage,
            };
        });
}
