/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Represents an event type.
 */
export type EventType = {
    /**
     * List of API versions that this event type supports.
     */
    availableVersions?: Array<number> | undefined;
    /**
     * Short description of this event type.
     */
    description?: string | undefined;
    /**
     * Group for this event type. Typically the entity that this event relates to.
     */
    group?: string | undefined;
    /**
     * Type of event sent by Paddle, in the format `entity.event_type`.
     */
    name?: string | undefined;
};

/** @internal */
export namespace EventType$ {
    export type Inbound = {
        available_versions?: Array<number> | undefined;
        description?: string | undefined;
        group?: string | undefined;
        name?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EventType, z.ZodTypeDef, Inbound> = z
        .object({
            available_versions: z.array(z.number().int()).optional(),
            description: z.string().optional(),
            group: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.available_versions === undefined
                    ? null
                    : { availableVersions: v.available_versions }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });

    export type Outbound = {
        available_versions?: Array<number> | undefined;
        description?: string | undefined;
        group?: string | undefined;
        name?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EventType> = z
        .object({
            availableVersions: z.array(z.number().int()).optional(),
            description: z.string().optional(),
            group: z.string().optional(),
            name: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.availableVersions === undefined
                    ? null
                    : { available_versions: v.availableVersions }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.group === undefined ? null : { group: v.group }),
                ...(v.name === undefined ? null : { name: v.name }),
            };
        });
}
