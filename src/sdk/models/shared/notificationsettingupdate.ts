/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Represents a notification destination.
 */
export type NotificationSettingUpdate = {
    /**
     * Whether Paddle should try to deliver events to this notification destination.
     */
    active?: boolean | undefined;
    /**
     * API version that returned objects for events should conform to. Must be a valid version of the Paddle API. Cannot be a version older than your account default. Defaults to your account default if not included.
     */
    apiVersion?: number | undefined;
    /**
     * Short description for this notification destination. Shown in the Paddle Dashboard.
     */
    description?: string | undefined;
    /**
     * Webhook endpoint URL or email address.
     */
    destination?: string | undefined;
    /**
     * Whether potentially sensitive fields should be sent to this notification destination.
     */
    includeSensitiveFields?: boolean | undefined;
    /**
     * Subscribed events for this notification destination. When creating or updating a notification destination, pass an array of event type names only. Paddle returns the complete event type object.
     */
    subscribedEvents?: Array<string> | undefined;
};

/** @internal */
export namespace NotificationSettingUpdate$ {
    export type Inbound = {
        active?: boolean | undefined;
        api_version?: number | undefined;
        description?: string | undefined;
        destination?: string | undefined;
        include_sensitive_fields?: boolean | undefined;
        subscribed_events?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<NotificationSettingUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean().default(true),
            api_version: z.number().int().optional(),
            description: z.string().optional(),
            destination: z.string().optional(),
            include_sensitive_fields: z.boolean().default(false),
            subscribed_events: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.api_version === undefined ? null : { apiVersion: v.api_version }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.include_sensitive_fields === undefined
                    ? null
                    : { includeSensitiveFields: v.include_sensitive_fields }),
                ...(v.subscribed_events === undefined
                    ? null
                    : { subscribedEvents: v.subscribed_events }),
            };
        });

    export type Outbound = {
        active: boolean;
        api_version?: number | undefined;
        description?: string | undefined;
        destination?: string | undefined;
        include_sensitive_fields: boolean;
        subscribed_events?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationSettingUpdate> = z
        .object({
            active: z.boolean().default(true),
            apiVersion: z.number().int().optional(),
            description: z.string().optional(),
            destination: z.string().optional(),
            includeSensitiveFields: z.boolean().default(false),
            subscribedEvents: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                active: v.active,
                ...(v.apiVersion === undefined ? null : { api_version: v.apiVersion }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                include_sensitive_fields: v.includeSensitiveFields,
                ...(v.subscribedEvents === undefined
                    ? null
                    : { subscribed_events: v.subscribedEvents }),
            };
        });
}
