/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Product, Product$ } from "./product";
import { Totals1, Totals1$ } from "./totals1";
import { UnitTotals, UnitTotals$ } from "./unittotals";
import { z } from "zod";

/**
 * Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
 */
export type TransactionPreviewLineItem = {
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId?: string | undefined;
    /**
     * Represents a product entity.
     */
    product?: Product | undefined;
    /**
     * Quantity of this transaction line item.
     */
    quantity?: number | undefined;
    /**
     * Rate used to calculate tax for this transaction line item.
     */
    taxRate?: string | undefined;
    /**
     * Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
     */
    totals?: Totals1 | undefined;
    /**
     * Breakdown of the charge for one unit in the lowest denomination of a currency (e.g. cents for USD).
     */
    unitTotals?: UnitTotals | undefined;
};

/** @internal */
export namespace TransactionPreviewLineItem$ {
    export type Inbound = {
        price_id?: string | undefined;
        product?: Product$.Inbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals1$.Inbound | undefined;
        unit_totals?: UnitTotals$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionPreviewLineItem, z.ZodTypeDef, Inbound> = z
        .object({
            price_id: z.string().optional(),
            product: Product$.inboundSchema.optional(),
            quantity: z.number().optional(),
            tax_rate: z.string().optional(),
            totals: Totals1$.inboundSchema.optional(),
            unit_totals: UnitTotals$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.price_id === undefined ? null : { priceId: v.price_id }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unit_totals === undefined ? null : { unitTotals: v.unit_totals }),
            };
        });

    export type Outbound = {
        price_id?: string | undefined;
        product?: Product$.Outbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals1$.Outbound | undefined;
        unit_totals?: UnitTotals$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPreviewLineItem> = z
        .object({
            priceId: z.string().optional(),
            product: Product$.outboundSchema.optional(),
            quantity: z.number().optional(),
            taxRate: z.string().optional(),
            totals: Totals1$.outboundSchema.optional(),
            unitTotals: UnitTotals$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.priceId === undefined ? null : { price_id: v.priceId }),
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unitTotals === undefined ? null : { unit_totals: v.unitTotals }),
            };
        });
}
