/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Kind of change that's scheduled to be applied to this subscription.
 */
export enum SubscriptionScheduledChangeAction {
    Cancel = "cancel",
    Pause = "pause",
    Resume = "resume",
}

/**
 * Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
 */
export type SubscriptionScheduledChange = {
    /**
     * Kind of change that's scheduled to be applied to this subscription.
     */
    action?: SubscriptionScheduledChangeAction | undefined;
    /**
     * Timestamp following the RFC 3339 standard
     */
    effectiveAt?: Date | undefined;
    /**
     * RFC 3339 datetime string.
     */
    resumeAt?: Date | undefined;
};

/** @internal */
export const SubscriptionScheduledChangeAction$ = z.nativeEnum(SubscriptionScheduledChangeAction);

/** @internal */
export namespace SubscriptionScheduledChange$ {
    export type Inbound = {
        action?: SubscriptionScheduledChangeAction | undefined;
        effective_at?: string | undefined;
        resume_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SubscriptionScheduledChange, z.ZodTypeDef, Inbound> = z
        .object({
            action: SubscriptionScheduledChangeAction$.optional(),
            effective_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            resume_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.effective_at === undefined ? null : { effectiveAt: v.effective_at }),
                ...(v.resume_at === undefined ? null : { resumeAt: v.resume_at }),
            };
        });

    export type Outbound = {
        action?: SubscriptionScheduledChangeAction | undefined;
        effective_at?: string | undefined;
        resume_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriptionScheduledChange> = z
        .object({
            action: SubscriptionScheduledChangeAction$.optional(),
            effectiveAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            resumeAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.effectiveAt === undefined ? null : { effective_at: v.effectiveAt }),
                ...(v.resumeAt === undefined ? null : { resume_at: v.resumeAt }),
            };
        });
}
