/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Contacts = {
    /**
     * Email address for this entity.
     */
    email: string;
    /**
     * Full name.
     */
    name: string;
};

/**
 * Represents a business entity.
 */
export type BusinessCreate = {
    /**
     * Company number for this business.
     */
    companyNumber?: string | null | undefined;
    /**
     * List of contacts related to this business, typically used for sending invoices.
     */
    contacts?: Array<Contacts> | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    id?: string | undefined;
    /**
     * Full name.
     */
    name: string;
    /**
     * Tax or VAT Number for this business.
     */
    taxIdentifier?: string | null | undefined;
};

/** @internal */
export namespace Contacts$ {
    export type Inbound = {
        email: string;
        name: string;
    };

    export const inboundSchema: z.ZodType<Contacts, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                name: v.name,
            };
        });

    export type Outbound = {
        email: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contacts> = z
        .object({
            email: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                name: v.name,
            };
        });
}

/** @internal */
export namespace BusinessCreate$ {
    export type Inbound = {
        company_number?: string | null | undefined;
        contacts?: Array<Contacts$.Inbound> | undefined;
        id?: string | undefined;
        name: string;
        tax_identifier?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<BusinessCreate, z.ZodTypeDef, Inbound> = z
        .object({
            company_number: z.nullable(z.string()).optional(),
            contacts: z.array(z.lazy(() => Contacts$.inboundSchema)).optional(),
            id: z.string().optional(),
            name: z.string(),
            tax_identifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.company_number === undefined ? null : { companyNumber: v.company_number }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.tax_identifier === undefined ? null : { taxIdentifier: v.tax_identifier }),
            };
        });

    export type Outbound = {
        company_number?: string | null | undefined;
        contacts?: Array<Contacts$.Outbound> | undefined;
        id?: string | undefined;
        name: string;
        tax_identifier?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BusinessCreate> = z
        .object({
            companyNumber: z.nullable(z.string()).optional(),
            contacts: z.array(z.lazy(() => Contacts$.outboundSchema)).optional(),
            id: z.string().optional(),
            name: z.string(),
            taxIdentifier: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.companyNumber === undefined ? null : { company_number: v.companyNumber }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.taxIdentifier === undefined ? null : { tax_identifier: v.taxIdentifier }),
            };
        });
}
