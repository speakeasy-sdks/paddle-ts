/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CurrencyCodeInvoice, CurrencyCodeInvoice$ } from "./currencycodeinvoice";
import { z } from "zod";

/**
 * Represents an amount in a particular currency.
 */
export type MoneyInvoice = {
    /**
     * Amount in the lowest denomination of a currency (eg cents for USD). Decimal values can be used for sub unit pricing. Min => 0.01. Max <= 99999999.00
     */
    amount: string;
    /**
     * Currency codes accepted for invoice. Current accepted currencies for invoice: EUR, GPB and USD.
     */
    currencyCode: CurrencyCodeInvoice;
};

/** @internal */
export namespace MoneyInvoice$ {
    export type Inbound = {
        amount: string;
        currency_code: CurrencyCodeInvoice;
    };

    export const inboundSchema: z.ZodType<MoneyInvoice, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.string(),
            currency_code: CurrencyCodeInvoice$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                currencyCode: v.currency_code,
            };
        });

    export type Outbound = {
        amount: string;
        currency_code: CurrencyCodeInvoice;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MoneyInvoice> = z
        .object({
            amount: z.string(),
            currencyCode: CurrencyCodeInvoice$,
        })
        .transform((v) => {
            return {
                amount: v.amount,
                currency_code: v.currencyCode,
            };
        });
}
