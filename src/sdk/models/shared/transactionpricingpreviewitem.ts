/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TransactionPricingPreviewItem = {
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId?: string | undefined;
    /**
     * Quantity of the item to preview.
     */
    quantity: number;
};

/** @internal */
export namespace TransactionPricingPreviewItem$ {
    export type Inbound = {
        price_id?: string | undefined;
        quantity: number;
    };

    export const inboundSchema: z.ZodType<TransactionPricingPreviewItem, z.ZodTypeDef, Inbound> = z
        .object({
            price_id: z.string().optional(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.price_id === undefined ? null : { priceId: v.price_id }),
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        price_id?: string | undefined;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPricingPreviewItem> =
        z
            .object({
                priceId: z.string().optional(),
                quantity: z.number().int(),
            })
            .transform((v) => {
                return {
                    ...(v.priceId === undefined ? null : { price_id: v.priceId }),
                    quantity: v.quantity,
                };
            });
}
