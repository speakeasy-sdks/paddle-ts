/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BillingDetails2, BillingDetails2$ } from "./billingdetails2";
import { CollectionMode2, CollectionMode2$ } from "./collectionmode2";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { CustomData, CustomData$ } from "./customdata";
import { ItemSubscription, ItemSubscription$ } from "./itemsubscription";
import { Period2, Period2$ } from "./period2";
import { SchemaStatusSubscription, SchemaStatusSubscription$ } from "./schemastatussubscription";
import {
    SubscriptionManagementUrls,
    SubscriptionManagementUrls$,
} from "./subscriptionmanagementurls";
import {
    SubscriptionScheduledChange,
    SubscriptionScheduledChange$,
} from "./subscriptionscheduledchange";
import { TimePeriod, TimePeriod$ } from "./timeperiod";
import { z } from "zod";

/**
 * Details of the discount applied to this subscription.
 */
export type Subscription1Discount = {
    /**
     * RFC 3339 datetime string.
     */
    endsAt: Date;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    id: string;
    /**
     * RFC 3339 datetime string.
     */
    startsAt: Date;
};

/**
 * Represents a subscription entity.
 */
export type Subscription1 = {
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    billingCycle?: Period2 | undefined;
    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    billingDetails?: BillingDetails2 | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    canceledAt?: Date | undefined;
    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    collectionMode?: CollectionMode2 | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    currentBillingPeriod?: TimePeriod | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: CustomData | null | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Details of the discount applied to this subscription.
     */
    discount?: Subscription1Discount | null | undefined;
    /**
     * RFC 3339 datetime string.
     */
    firstBilledAt?: Date | undefined;
    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    id?: string | undefined;
    /**
     * List of items on this subscription. Only recurring items are returned.
     */
    items?: Array<ItemSubscription> | undefined;
    /**
     * Public URLs that customers can use to make changes to this subscription.
     */
    managementUrls?: SubscriptionManagementUrls | undefined;
    /**
     * RFC 3339 datetime string.
     */
    nextBilledAt?: Date | undefined;
    /**
     * RFC 3339 datetime string.
     */
    pausedAt?: Date | undefined;
    /**
     * Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
     */
    scheduledChange?: SubscriptionScheduledChange | undefined;
    /**
     * RFC 3339 datetime string.
     */
    startedAt?: Date | undefined;
    /**
     * Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
     */
    status?: SchemaStatusSubscription | undefined;
    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Subscription1Discount$ {
    export type Inbound = {
        ends_at: string;
        id: string;
        starts_at: string;
    };

    export const inboundSchema: z.ZodType<Subscription1Discount, z.ZodTypeDef, Inbound> = z
        .object({
            ends_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            starts_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                endsAt: v.ends_at,
                id: v.id,
                startsAt: v.starts_at,
            };
        });

    export type Outbound = {
        ends_at: string;
        id: string;
        starts_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Subscription1Discount> = z
        .object({
            endsAt: z.date().transform((v) => v.toISOString()),
            id: z.string(),
            startsAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ends_at: v.endsAt,
                id: v.id,
                starts_at: v.startsAt,
            };
        });
}

/** @internal */
export namespace Subscription1$ {
    export type Inbound = {
        address_id?: string | undefined;
        billing_cycle?: Period2$.Inbound | undefined;
        billing_details?: BillingDetails2$.Inbound | undefined;
        business_id?: string | undefined;
        canceled_at?: string | undefined;
        collection_mode?: CollectionMode2 | undefined;
        created_at?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        current_billing_period?: TimePeriod$.Inbound | undefined;
        custom_data?: CustomData$.Inbound | null | undefined;
        customer_id?: string | undefined;
        discount?: Subscription1Discount$.Inbound | null | undefined;
        first_billed_at?: string | undefined;
        id?: string | undefined;
        items?: Array<ItemSubscription$.Inbound> | undefined;
        management_urls?: SubscriptionManagementUrls$.Inbound | undefined;
        next_billed_at?: string | undefined;
        paused_at?: string | undefined;
        scheduled_change?: SubscriptionScheduledChange$.Inbound | undefined;
        started_at?: string | undefined;
        status?: SchemaStatusSubscription | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Subscription1, z.ZodTypeDef, Inbound> = z
        .object({
            address_id: z.string().optional(),
            billing_cycle: Period2$.inboundSchema.optional(),
            billing_details: BillingDetails2$.inboundSchema.optional(),
            business_id: z.string().optional(),
            canceled_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            collection_mode: CollectionMode2$.default(CollectionMode2.Automatic),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency_code: CurrencyCode2$.optional(),
            current_billing_period: TimePeriod$.inboundSchema.optional(),
            custom_data: z.nullable(CustomData$.inboundSchema).optional(),
            customer_id: z.string().optional(),
            discount: z.nullable(z.lazy(() => Subscription1Discount$.inboundSchema)).optional(),
            first_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            items: z.array(ItemSubscription$.inboundSchema).optional(),
            management_urls: SubscriptionManagementUrls$.inboundSchema.optional(),
            next_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            paused_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            scheduled_change: SubscriptionScheduledChange$.inboundSchema.optional(),
            started_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: SchemaStatusSubscription$.optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.billing_cycle === undefined ? null : { billingCycle: v.billing_cycle }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.canceled_at === undefined ? null : { canceledAt: v.canceled_at }),
                ...(v.collection_mode === undefined ? null : { collectionMode: v.collection_mode }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.current_billing_period === undefined
                    ? null
                    : { currentBillingPeriod: v.current_billing_period }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.first_billed_at === undefined ? null : { firstBilledAt: v.first_billed_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.management_urls === undefined ? null : { managementUrls: v.management_urls }),
                ...(v.next_billed_at === undefined ? null : { nextBilledAt: v.next_billed_at }),
                ...(v.paused_at === undefined ? null : { pausedAt: v.paused_at }),
                ...(v.scheduled_change === undefined
                    ? null
                    : { scheduledChange: v.scheduled_change }),
                ...(v.started_at === undefined ? null : { startedAt: v.started_at }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        address_id?: string | undefined;
        billing_cycle?: Period2$.Outbound | undefined;
        billing_details?: BillingDetails2$.Outbound | undefined;
        business_id?: string | undefined;
        canceled_at?: string | undefined;
        collection_mode: CollectionMode2;
        created_at?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        current_billing_period?: TimePeriod$.Outbound | undefined;
        custom_data?: CustomData$.Outbound | null | undefined;
        customer_id?: string | undefined;
        discount?: Subscription1Discount$.Outbound | null | undefined;
        first_billed_at?: string | undefined;
        id?: string | undefined;
        items?: Array<ItemSubscription$.Outbound> | undefined;
        management_urls?: SubscriptionManagementUrls$.Outbound | undefined;
        next_billed_at?: string | undefined;
        paused_at?: string | undefined;
        scheduled_change?: SubscriptionScheduledChange$.Outbound | undefined;
        started_at?: string | undefined;
        status?: SchemaStatusSubscription | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Subscription1> = z
        .object({
            addressId: z.string().optional(),
            billingCycle: Period2$.outboundSchema.optional(),
            billingDetails: BillingDetails2$.outboundSchema.optional(),
            businessId: z.string().optional(),
            canceledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            collectionMode: CollectionMode2$.default(CollectionMode2.Automatic),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currencyCode: CurrencyCode2$.optional(),
            currentBillingPeriod: TimePeriod$.outboundSchema.optional(),
            customData: z.nullable(CustomData$.outboundSchema).optional(),
            customerId: z.string().optional(),
            discount: z.nullable(z.lazy(() => Subscription1Discount$.outboundSchema)).optional(),
            firstBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            items: z.array(ItemSubscription$.outboundSchema).optional(),
            managementUrls: SubscriptionManagementUrls$.outboundSchema.optional(),
            nextBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            pausedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            scheduledChange: SubscriptionScheduledChange$.outboundSchema.optional(),
            startedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: SchemaStatusSubscription$.optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.billingCycle === undefined ? null : { billing_cycle: v.billingCycle }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.canceledAt === undefined ? null : { canceled_at: v.canceledAt }),
                collection_mode: v.collectionMode,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.currentBillingPeriod === undefined
                    ? null
                    : { current_billing_period: v.currentBillingPeriod }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.firstBilledAt === undefined ? null : { first_billed_at: v.firstBilledAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.managementUrls === undefined ? null : { management_urls: v.managementUrls }),
                ...(v.nextBilledAt === undefined ? null : { next_billed_at: v.nextBilledAt }),
                ...(v.pausedAt === undefined ? null : { paused_at: v.pausedAt }),
                ...(v.scheduledChange === undefined
                    ? null
                    : { scheduled_change: v.scheduledChange }),
                ...(v.startedAt === undefined ? null : { started_at: v.startedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
