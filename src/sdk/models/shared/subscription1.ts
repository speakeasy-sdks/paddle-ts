/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BillingDetails2 } from "./billingdetails2";
import { CollectionMode2 } from "./collectionmode2";
import { CurrencyCode2 } from "./currencycode2";
import { CustomData } from "./customdata";
import { ItemSubscription } from "./itemsubscription";
import { Period2 } from "./period2";
import { SchemasstatusSubscription } from "./schemasstatussubscription";
import { SubscriptionManagementUrls } from "./subscriptionmanagementurls";
import { SubscriptionScheduledChange } from "./subscriptionscheduledchange";
import { TimePeriod } from "./timeperiod";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Details of the discount applied to this subscription.
 */
export class Subscription1Discount extends SpeakeasyBase {
    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "ends_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    endsAt: Date;

    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "starts_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    startsAt: Date;
}

/**
 * Represents a subscription preview.
 */
export class Subscription1 extends SpeakeasyBase {
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "address_id" })
    addressId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "billing_cycle" })
    @Type(() => Period2)
    billingCycle?: Period2;

    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_details" })
    @Type(() => BillingDetails2)
    billingDetails?: BillingDetails2;

    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "business_id" })
    businessId?: string;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "canceled_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    canceledAt?: Date;

    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "collection_mode" })
    collectionMode?: CollectionMode2;

    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Supported three-letter ISO 4217 currency code.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency_code" })
    currencyCode?: CurrencyCode2;

    @SpeakeasyMetadata()
    @Expose({ name: "current_billing_period" })
    @Type(() => TimePeriod)
    currentBillingPeriod?: TimePeriod;

    /**
     * Your own structured key-value data.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "custom_data" })
    @Type(() => CustomData)
    customData?: CustomData;

    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Details of the discount applied to this subscription.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount" })
    @Type(() => Subscription1Discount)
    discount?: Subscription1Discount;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "first_billed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    firstBilledAt?: Date;

    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * List of items on this subscription. Only recurring items are returned.
     */
    @SpeakeasyMetadata({ elemType: ItemSubscription })
    @Expose({ name: "items" })
    @Type(() => ItemSubscription)
    items?: ItemSubscription[];

    /**
     * Public URLs that customers can use to make changes to this subscription.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "management_urls" })
    @Type(() => SubscriptionManagementUrls)
    managementUrls?: SubscriptionManagementUrls;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "next_billed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    nextBilledAt?: Date;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paused_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    pausedAt?: Date;

    /**
     * Change that's scheduled to be applied to a subscription. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes. `null` if no scheduled changes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scheduled_change" })
    @Type(() => SubscriptionScheduledChange)
    scheduledChange?: SubscriptionScheduledChange;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "started_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    startedAt?: Date;

    /**
     * Status of this subscription. Set automatically by Paddle. Use the pause subscription or cancel subscription operations to change.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: SchemasstatusSubscription;

    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}
