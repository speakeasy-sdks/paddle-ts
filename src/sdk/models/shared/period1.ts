/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Interval {
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year",
}

/**
 * Defines a period of time
 */
export type Period1 = {
    frequency: number;
    interval: Interval;
};

/** @internal */
export const Interval$ = z.nativeEnum(Interval);

/** @internal */
export namespace Period1$ {
    export type Inbound = {
        frequency: number;
        interval: Interval;
    };

    export const inboundSchema: z.ZodType<Period1, z.ZodTypeDef, Inbound> = z
        .object({
            frequency: z.number().int(),
            interval: Interval$,
        })
        .transform((v) => {
            return {
                frequency: v.frequency,
                interval: v.interval,
            };
        });

    export type Outbound = {
        frequency: number;
        interval: Interval;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Period1> = z
        .object({
            frequency: z.number().int(),
            interval: Interval$,
        })
        .transform((v) => {
            return {
                frequency: v.frequency,
                interval: v.interval,
            };
        });
}
