/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * New or changed entity.
 */
export type Data = {};

/**
 * Represents an event entity.
 */
export type Event = {
    /**
     * New or changed entity.
     */
    data?: Data | undefined;
    /**
     * Unique Paddle ID for this event, prefixed with `evt_`.
     */
    eventId?: string | undefined;
    /**
     * Type of event sent by Paddle, in the format `entity.event_type`.
     */
    eventType?: string | undefined;
    /**
     * Unique Paddle ID for this notification, prefixed with `ntf_`.
     */
    notificationId?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    occurredAt?: Date | undefined;
};

/** @internal */
export namespace Data$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z.object({});
}

/** @internal */
export namespace Event$ {
    export type Inbound = {
        data?: Data$.Inbound | undefined;
        event_id?: string | undefined;
        event_type?: string | undefined;
        notification_id?: string | undefined;
        occurred_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Event, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.lazy(() => Data$.inboundSchema).optional(),
            event_id: z.string().optional(),
            event_type: z.string().optional(),
            notification_id: z.string().optional(),
            occurred_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.event_id === undefined ? null : { eventId: v.event_id }),
                ...(v.event_type === undefined ? null : { eventType: v.event_type }),
                ...(v.notification_id === undefined ? null : { notificationId: v.notification_id }),
                ...(v.occurred_at === undefined ? null : { occurredAt: v.occurred_at }),
            };
        });

    export type Outbound = {
        data?: Data$.Outbound | undefined;
        event_id?: string | undefined;
        event_type?: string | undefined;
        notification_id?: string | undefined;
        occurred_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Event> = z
        .object({
            data: z.lazy(() => Data$.outboundSchema).optional(),
            eventId: z.string().optional(),
            eventType: z.string().optional(),
            notificationId: z.string().optional(),
            occurredAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.eventId === undefined ? null : { event_id: v.eventId }),
                ...(v.eventType === undefined ? null : { event_type: v.eventType }),
                ...(v.notificationId === undefined ? null : { notification_id: v.notificationId }),
                ...(v.occurredAt === undefined ? null : { occurred_at: v.occurredAt }),
            };
        });
}
