/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * New or changed entity.
 */
export class Data extends SpeakeasyBase {}

/**
 * Represents an event entity.
 */
export class Event extends SpeakeasyBase {
    /**
     * New or changed entity.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => Data)
    data?: Data;

    /**
     * Unique Paddle ID for this event, prefixed with `evt_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_id" })
    eventId?: string;

    /**
     * Type of event sent by Paddle, in the format `entity.event_type`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "event_type" })
    eventType?: string;

    /**
     * Unique Paddle ID for this notification, prefixed with `ntf_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "notification_id" })
    notificationId?: string;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "occurred_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    occurredAt?: Date;
}
