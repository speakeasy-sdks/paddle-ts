/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PriceInput, PriceInput$ } from "./priceinput";
import { z } from "zod";

export type TransactionItemInput = {
    /**
     * Represents a price entity.
     */
    price?: PriceInput | undefined;
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId: string;
    /**
     * Quantity of this item on the transaction.
     */
    quantity: number;
};

/** @internal */
export namespace TransactionItemInput$ {
    export type Inbound = {
        price?: PriceInput$.Inbound | undefined;
        price_id: string;
        quantity: number;
    };

    export const inboundSchema: z.ZodType<TransactionItemInput, z.ZodTypeDef, Inbound> = z
        .object({
            price: PriceInput$.inboundSchema.optional(),
            price_id: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                priceId: v.price_id,
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        price?: PriceInput$.Outbound | undefined;
        price_id: string;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionItemInput> = z
        .object({
            price: PriceInput$.outboundSchema.optional(),
            priceId: z.string(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                price_id: v.priceId,
                quantity: v.quantity,
            };
        });
}
