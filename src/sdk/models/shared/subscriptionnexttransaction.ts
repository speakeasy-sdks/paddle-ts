/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { TimePeriod, TimePeriod$ } from "./timeperiod";
import { TransactionPreviewDetails, TransactionPreviewDetails$ } from "./transactionpreviewdetails";
import { z } from "zod";

/**
 * Preview of the next transaction for this subscription. May include prorated charges that are not yet billed and one-time charges. `null` if the subscription is scheduled to cancel or pause.
 */
export type SubscriptionNextTransaction = {
    adjustments?: Array<any> | undefined;
    billingPeriod?: TimePeriod | undefined;
    /**
     * Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
     */
    details?: TransactionPreviewDetails | undefined;
};

/** @internal */
export namespace SubscriptionNextTransaction$ {
    export type Inbound = {
        adjustments?: Array<any> | undefined;
        billing_period?: TimePeriod$.Inbound | undefined;
        details?: TransactionPreviewDetails$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<SubscriptionNextTransaction, z.ZodTypeDef, Inbound> = z
        .object({
            adjustments: z.array(z.any()).optional(),
            billing_period: TimePeriod$.inboundSchema.optional(),
            details: TransactionPreviewDetails$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.billing_period === undefined ? null : { billingPeriod: v.billing_period }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        adjustments?: Array<any> | undefined;
        billing_period?: TimePeriod$.Outbound | undefined;
        details?: TransactionPreviewDetails$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriptionNextTransaction> = z
        .object({
            adjustments: z.array(z.any()).optional(),
            billingPeriod: TimePeriod$.outboundSchema.optional(),
            details: TransactionPreviewDetails$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.billingPeriod === undefined ? null : { billing_period: v.billingPeriod }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}
