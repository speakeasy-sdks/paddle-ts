/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Address, Address$ } from "./address";
import { Adjustment2, Adjustment2$ } from "./adjustment2";
import { BillingDetails2, BillingDetails2$ } from "./billingdetails2";
import { Business, Business$ } from "./business";
import { CollectionMode2, CollectionMode2$ } from "./collectionmode2";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { CustomData, CustomData$ } from "./customdata";
import { Customer, Customer$ } from "./customer";
import { Discount, Discount$ } from "./discount";
import { OriginTransaction, OriginTransaction$ } from "./origintransaction";
import { SchemaStatusTransaction, SchemaStatusTransaction$ } from "./schemastatustransaction";
import { TimePeriod, TimePeriod$ } from "./timeperiod";
import {
    TransactionAdjustmentsTotalsInclude,
    TransactionAdjustmentsTotalsInclude$,
} from "./transactionadjustmentstotalsinclude";
import { TransactionDetails, TransactionDetails$ } from "./transactiondetails";
import { TransactionItem, TransactionItem$ } from "./transactionitem";
import { TransactionPaymentAttempt, TransactionPaymentAttempt$ } from "./transactionpaymentattempt";
import { z } from "zod";

/**
 * Paddle Checkout details for this transaction. Always included for automatically-collected transactions. Included where `billing_details.enable_checkout` is `true` for manually-collected transactions.
 */
export type TransactionIncludesCheckout = {
    /**
     * Paddle Checkout URL for this transaction, composed of your default payment URL + `_?txn=` and the Paddle ID for this transaction.
     */
    url?: string | undefined;
};

/**
 * Represents a transaction entity with included entitites.
 */
export type TransactionIncludes = {
    /**
     * Represents an address entity.
     */
    address?: Address | undefined;
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    /**
     * List of adjustments for this transaction. Returned when the `include` parameter is used.
     */
    adjustments?: Array<Adjustment2> | undefined;
    /**
     * Breakdown of all the adjustments made against a transaction in the transaction currency.
     */
    adjustmentsTotals?: TransactionAdjustmentsTotalsInclude | undefined;
    /**
     * RFC 3339 datetime string.
     */
    billedAt?: Date | undefined;
    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    billingDetails?: BillingDetails2 | undefined;
    billingPeriod?: TimePeriod | undefined;
    /**
     * Represents a business entity.
     */
    business?: Business | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * Paddle Checkout details for this transaction. Always included for automatically-collected transactions. Included where `billing_details.enable_checkout` is `true` for manually-collected transactions.
     */
    checkout?: TransactionIncludesCheckout | null | undefined;
    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    collectionMode?: CollectionMode2 | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: CustomData | null | undefined;
    /**
     * Represents a customer entity.
     */
    customer?: Customer | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
     */
    details?: TransactionDetails | undefined;
    /**
     * Represents a discount entity.
     */
    discount?: Discount | undefined;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    discountId?: string | undefined;
    /**
     * Unique Paddle ID for this transaction entity, prefixed with `txn_`.
     */
    id?: string | undefined;
    /**
     * Paddle ID of the invoice that this transaction is related to, prefixed with `inv_`. Used for compatibility with the initial version of the Paddle Invoice API.
     */
    invoiceId?: string | null | undefined;
    /**
     * Invoice number for this transaction. Automatically generated by Paddle when you mark a transaction as `billed` where `collection_mode` is `manual`.
     */
    invoiceNumber?: string | null | undefined;
    /**
     * List of items on this transaction. For calculated totals, use `details.line_items`.
     */
    items?: Array<TransactionItem> | undefined;
    /**
     * Describes how this transaction was created.
     */
    origin?: OriginTransaction | undefined;
    /**
     * List of payment attempts for this transaction, including successful payments. Sorted by `created_at` in descending order, so most recent attemps are returned first.
     */
    payments?: Array<TransactionPaymentAttempt> | undefined;
    /**
     * Status of this transaction. You may set a transaction to `billed` or `canceled`, other statuses are set automatically by Paddle.
     */
    status?: SchemaStatusTransaction | undefined;
    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    subscriptionId?: string | undefined;
    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace TransactionIncludesCheckout$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionIncludesCheckout, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionIncludesCheckout> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace TransactionIncludes$ {
    export type Inbound = {
        address?: Address$.Inbound | undefined;
        address_id?: string | undefined;
        adjustments?: Array<Adjustment2$.Inbound> | undefined;
        adjustments_totals?: TransactionAdjustmentsTotalsInclude$.Inbound | undefined;
        billed_at?: string | undefined;
        billing_details?: BillingDetails2$.Inbound | undefined;
        billing_period?: TimePeriod$.Inbound | undefined;
        business?: Business$.Inbound | undefined;
        business_id?: string | undefined;
        checkout?: TransactionIncludesCheckout$.Inbound | null | undefined;
        collection_mode?: CollectionMode2 | undefined;
        created_at?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        custom_data?: CustomData$.Inbound | null | undefined;
        customer?: Customer$.Inbound | undefined;
        customer_id?: string | undefined;
        details?: TransactionDetails$.Inbound | undefined;
        discount?: Discount$.Inbound | undefined;
        discount_id?: string | undefined;
        id?: string | undefined;
        invoice_id?: string | null | undefined;
        invoice_number?: string | null | undefined;
        items?: Array<TransactionItem$.Inbound> | undefined;
        origin?: OriginTransaction | undefined;
        payments?: Array<TransactionPaymentAttempt$.Inbound> | undefined;
        status?: SchemaStatusTransaction | undefined;
        subscription_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionIncludes, z.ZodTypeDef, Inbound> = z
        .object({
            address: Address$.inboundSchema.optional(),
            address_id: z.string().optional(),
            adjustments: z.array(Adjustment2$.inboundSchema).optional(),
            adjustments_totals: TransactionAdjustmentsTotalsInclude$.inboundSchema.optional(),
            billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            billing_details: BillingDetails2$.inboundSchema.optional(),
            billing_period: TimePeriod$.inboundSchema.optional(),
            business: Business$.inboundSchema.optional(),
            business_id: z.string().optional(),
            checkout: z
                .nullable(z.lazy(() => TransactionIncludesCheckout$.inboundSchema))
                .optional(),
            collection_mode: CollectionMode2$.default(CollectionMode2.Automatic),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            currency_code: CurrencyCode2$.optional(),
            custom_data: z.nullable(CustomData$.inboundSchema).optional(),
            customer: Customer$.inboundSchema.optional(),
            customer_id: z.string().optional(),
            details: TransactionDetails$.inboundSchema.optional(),
            discount: Discount$.inboundSchema.optional(),
            discount_id: z.string().optional(),
            id: z.string().optional(),
            invoice_id: z.nullable(z.string()).optional(),
            invoice_number: z.nullable(z.string()).optional(),
            items: z.array(TransactionItem$.inboundSchema).optional(),
            origin: OriginTransaction$.optional(),
            payments: z.array(TransactionPaymentAttempt$.inboundSchema).optional(),
            status: SchemaStatusTransaction$.optional(),
            subscription_id: z.string().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.adjustments_totals === undefined
                    ? null
                    : { adjustmentsTotals: v.adjustments_totals }),
                ...(v.billed_at === undefined ? null : { billedAt: v.billed_at }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.billing_period === undefined ? null : { billingPeriod: v.billing_period }),
                ...(v.business === undefined ? null : { business: v.business }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.checkout === undefined ? null : { checkout: v.checkout }),
                ...(v.collection_mode === undefined ? null : { collectionMode: v.collection_mode }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.customer === undefined ? null : { customer: v.customer }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.discount_id === undefined ? null : { discountId: v.discount_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoice_id === undefined ? null : { invoiceId: v.invoice_id }),
                ...(v.invoice_number === undefined ? null : { invoiceNumber: v.invoice_number }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payments === undefined ? null : { payments: v.payments }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscription_id === undefined ? null : { subscriptionId: v.subscription_id }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        address?: Address$.Outbound | undefined;
        address_id?: string | undefined;
        adjustments?: Array<Adjustment2$.Outbound> | undefined;
        adjustments_totals?: TransactionAdjustmentsTotalsInclude$.Outbound | undefined;
        billed_at?: string | undefined;
        billing_details?: BillingDetails2$.Outbound | undefined;
        billing_period?: TimePeriod$.Outbound | undefined;
        business?: Business$.Outbound | undefined;
        business_id?: string | undefined;
        checkout?: TransactionIncludesCheckout$.Outbound | null | undefined;
        collection_mode: CollectionMode2;
        created_at?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        custom_data?: CustomData$.Outbound | null | undefined;
        customer?: Customer$.Outbound | undefined;
        customer_id?: string | undefined;
        details?: TransactionDetails$.Outbound | undefined;
        discount?: Discount$.Outbound | undefined;
        discount_id?: string | undefined;
        id?: string | undefined;
        invoice_id?: string | null | undefined;
        invoice_number?: string | null | undefined;
        items?: Array<TransactionItem$.Outbound> | undefined;
        origin?: OriginTransaction | undefined;
        payments?: Array<TransactionPaymentAttempt$.Outbound> | undefined;
        status?: SchemaStatusTransaction | undefined;
        subscription_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionIncludes> = z
        .object({
            address: Address$.outboundSchema.optional(),
            addressId: z.string().optional(),
            adjustments: z.array(Adjustment2$.outboundSchema).optional(),
            adjustmentsTotals: TransactionAdjustmentsTotalsInclude$.outboundSchema.optional(),
            billedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            billingDetails: BillingDetails2$.outboundSchema.optional(),
            billingPeriod: TimePeriod$.outboundSchema.optional(),
            business: Business$.outboundSchema.optional(),
            businessId: z.string().optional(),
            checkout: z
                .nullable(z.lazy(() => TransactionIncludesCheckout$.outboundSchema))
                .optional(),
            collectionMode: CollectionMode2$.default(CollectionMode2.Automatic),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            currencyCode: CurrencyCode2$.optional(),
            customData: z.nullable(CustomData$.outboundSchema).optional(),
            customer: Customer$.outboundSchema.optional(),
            customerId: z.string().optional(),
            details: TransactionDetails$.outboundSchema.optional(),
            discount: Discount$.outboundSchema.optional(),
            discountId: z.string().optional(),
            id: z.string().optional(),
            invoiceId: z.nullable(z.string()).optional(),
            invoiceNumber: z.nullable(z.string()).optional(),
            items: z.array(TransactionItem$.outboundSchema).optional(),
            origin: OriginTransaction$.optional(),
            payments: z.array(TransactionPaymentAttempt$.outboundSchema).optional(),
            status: SchemaStatusTransaction$.optional(),
            subscriptionId: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.adjustments === undefined ? null : { adjustments: v.adjustments }),
                ...(v.adjustmentsTotals === undefined
                    ? null
                    : { adjustments_totals: v.adjustmentsTotals }),
                ...(v.billedAt === undefined ? null : { billed_at: v.billedAt }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.billingPeriod === undefined ? null : { billing_period: v.billingPeriod }),
                ...(v.business === undefined ? null : { business: v.business }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.checkout === undefined ? null : { checkout: v.checkout }),
                collection_mode: v.collectionMode,
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.customer === undefined ? null : { customer: v.customer }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.discountId === undefined ? null : { discount_id: v.discountId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.invoiceId === undefined ? null : { invoice_id: v.invoiceId }),
                ...(v.invoiceNumber === undefined ? null : { invoice_number: v.invoiceNumber }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payments === undefined ? null : { payments: v.payments }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscriptionId === undefined ? null : { subscription_id: v.subscriptionId }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
