/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Event, Event$ } from "./event";
import { SchemaStatusNotification, SchemaStatusNotification$ } from "./schemastatusnotification";
import { z } from "zod";

/**
 * Describes how this notification was created.
 */
export enum Origin {
    Event = "event",
    Replay = "replay",
}

/**
 * Represents a notification entity.
 */
export type Notification = {
    /**
     * RFC 3339 datetime string.
     */
    deliveredAt?: Date | undefined;
    /**
     * Unique Paddle ID for this notification, prefixed with `ntf_`.
     */
    id?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    lastAttemptAt?: Date | undefined;
    /**
     * Unique Paddle ID for this notification setting, prefixed with `ntfset_`.
     */
    notificationSettingId?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    occurredAt?: Date | undefined;
    /**
     * Describes how this notification was created.
     */
    origin?: Origin | undefined;
    /**
     * Represents an event entity.
     */
    payload?: Event | undefined;
    /**
     * RFC 3339 datetime string.
     */
    replayedAt?: Date | undefined;
    /**
     * RFC 3339 datetime string.
     */
    retryAt?: Date | undefined;
    /**
     * Status of this notification.
     */
    status?: SchemaStatusNotification | undefined;
    /**
     * How many times delivery of this notification has been attempted. Automatically incremented by Paddle after an attempt.
     */
    timesAttempted?: number | undefined;
    /**
     * Type of event sent by Paddle, in the format `entity.event_type`.
     */
    type?: string | undefined;
};

/** @internal */
export const Origin$ = z.nativeEnum(Origin);

/** @internal */
export namespace Notification$ {
    export type Inbound = {
        delivered_at?: string | undefined;
        id?: string | undefined;
        last_attempt_at?: string | undefined;
        notification_setting_id?: string | undefined;
        occurred_at?: string | undefined;
        origin?: Origin | undefined;
        payload?: Event$.Inbound | undefined;
        replayed_at?: string | undefined;
        retry_at?: string | undefined;
        status?: SchemaStatusNotification | undefined;
        times_attempted?: number | undefined;
        type?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Notification, z.ZodTypeDef, Inbound> = z
        .object({
            delivered_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            last_attempt_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            notification_setting_id: z.string().optional(),
            occurred_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            origin: Origin$.optional(),
            payload: Event$.inboundSchema.optional(),
            replayed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            retry_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: SchemaStatusNotification$.optional(),
            times_attempted: z.number().int().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.delivered_at === undefined ? null : { deliveredAt: v.delivered_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.last_attempt_at === undefined ? null : { lastAttemptAt: v.last_attempt_at }),
                ...(v.notification_setting_id === undefined
                    ? null
                    : { notificationSettingId: v.notification_setting_id }),
                ...(v.occurred_at === undefined ? null : { occurredAt: v.occurred_at }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payload === undefined ? null : { payload: v.payload }),
                ...(v.replayed_at === undefined ? null : { replayedAt: v.replayed_at }),
                ...(v.retry_at === undefined ? null : { retryAt: v.retry_at }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.times_attempted === undefined ? null : { timesAttempted: v.times_attempted }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        delivered_at?: string | undefined;
        id?: string | undefined;
        last_attempt_at?: string | undefined;
        notification_setting_id?: string | undefined;
        occurred_at?: string | undefined;
        origin?: Origin | undefined;
        payload?: Event$.Outbound | undefined;
        replayed_at?: string | undefined;
        retry_at?: string | undefined;
        status?: SchemaStatusNotification | undefined;
        times_attempted?: number | undefined;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Notification> = z
        .object({
            deliveredAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            lastAttemptAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            notificationSettingId: z.string().optional(),
            occurredAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            origin: Origin$.optional(),
            payload: Event$.outboundSchema.optional(),
            replayedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            retryAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: SchemaStatusNotification$.optional(),
            timesAttempted: z.number().int().optional(),
            type: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deliveredAt === undefined ? null : { delivered_at: v.deliveredAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.lastAttemptAt === undefined ? null : { last_attempt_at: v.lastAttemptAt }),
                ...(v.notificationSettingId === undefined
                    ? null
                    : { notification_setting_id: v.notificationSettingId }),
                ...(v.occurredAt === undefined ? null : { occurred_at: v.occurredAt }),
                ...(v.origin === undefined ? null : { origin: v.origin }),
                ...(v.payload === undefined ? null : { payload: v.payload }),
                ...(v.replayedAt === undefined ? null : { replayed_at: v.replayedAt }),
                ...(v.retryAt === undefined ? null : { retry_at: v.retryAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.timesAttempted === undefined ? null : { times_attempted: v.timesAttempted }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
