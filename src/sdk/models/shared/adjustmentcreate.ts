/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AdjustmentPayoutTotals, AdjustmentPayoutTotals$ } from "./adjustmentpayouttotals";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { SchemaAction, SchemaAction$ } from "./schemaaction";
import { SchemaStatusAdjustment, SchemaStatusAdjustment$ } from "./schemastatusadjustment";
import { z } from "zod";

/**
 * Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
 *
 * @remarks
 * Include `amount` when creating a `partial` adjustment.
 */
export enum AdjustmentCreateType {
    Full = "full",
    Partial = "partial",
    Tax = "tax",
    Proration = "proration",
}

export type AdjustmentCreateAdjustmentItem = {
    /**
     * Amount adjusted before tax for this transaction item. Required when adjustment type is `partial`.
     */
    amount?: string | null | undefined;
    /**
     * Unique Paddle ID for this adjustment item, prefixed with `adjitm_`.
     */
    id?: string | undefined;
    /**
     * Unique Paddle ID for this transaction item, prefixed with `txnitm_`.
     */
    itemId: string;
    /**
     * Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
     *
     * @remarks
     * Include `amount` when creating a `partial` adjustment.
     */
    type: AdjustmentCreateType;
};

/**
 * Represents an adjustment entity.
 */
export type AdjustmentCreate = {
    /**
     * How this adjustment impacts the related transaction. `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`. `chargeback` and `chargeback_warning` adjustments are created automatically by Paddle.
     */
    action: SchemaAction;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Unique Paddle ID for this adjustment entity, prefixed with `adj_`.
     */
    id?: string | undefined;
    /**
     * List of items on this adjustment.
     */
    items: Array<AdjustmentCreateAdjustmentItem>;
    /**
     * Breakdown of how this adjustment affects your payout balance.
     */
    payoutTotals?: AdjustmentPayoutTotals | undefined;
    /**
     * Why this adjustment was created. Appears in the Paddle Dashboard. Retained for record-keeping purposes.
     */
    reason: string;
    /**
     * Status of this adjustment. Set automatically by Paddle.
     *
     * @remarks
     *
     * `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`
     * until they move to `approved` or `rejected` on review.  `credit` adjustments are created with the status `approved`.
     */
    status?: SchemaStatusAdjustment | undefined;
    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    subscriptionId?: string | undefined;
    /**
     * Paddle ID for the transaction related to this adjustment, prefixed with `txn_`.
     *
     * @remarks
     * Transactions must be `billed` or `completed`. You can't create an adjustment for a transaction
     * that has an adjustment that's `pending_approval`.
     */
    transactionId?: any | undefined;
};

/** @internal */
export const AdjustmentCreateType$ = z.nativeEnum(AdjustmentCreateType);

/** @internal */
export namespace AdjustmentCreateAdjustmentItem$ {
    export type Inbound = {
        amount?: string | null | undefined;
        id?: string | undefined;
        item_id: string;
        type: AdjustmentCreateType;
    };

    export const inboundSchema: z.ZodType<AdjustmentCreateAdjustmentItem, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            item_id: z.string(),
            type: AdjustmentCreateType$,
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.id === undefined ? null : { id: v.id }),
                itemId: v.item_id,
                type: v.type,
            };
        });

    export type Outbound = {
        amount?: string | null | undefined;
        id?: string | undefined;
        item_id: string;
        type: AdjustmentCreateType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdjustmentCreateAdjustmentItem> =
        z
            .object({
                amount: z.nullable(z.string()).optional(),
                id: z.string().optional(),
                itemId: z.string(),
                type: AdjustmentCreateType$,
            })
            .transform((v) => {
                return {
                    ...(v.amount === undefined ? null : { amount: v.amount }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    item_id: v.itemId,
                    type: v.type,
                };
            });
}

/** @internal */
export namespace AdjustmentCreate$ {
    export type Inbound = {
        action: SchemaAction;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        id?: string | undefined;
        items: Array<AdjustmentCreateAdjustmentItem$.Inbound>;
        payout_totals?: AdjustmentPayoutTotals$.Inbound | undefined;
        reason: string;
        status?: SchemaStatusAdjustment | undefined;
        subscription_id?: string | undefined;
        transaction_id?: any | undefined;
    };

    export const inboundSchema: z.ZodType<AdjustmentCreate, z.ZodTypeDef, Inbound> = z
        .object({
            action: SchemaAction$,
            currency_code: CurrencyCode2$.optional(),
            customer_id: z.string().optional(),
            id: z.string().optional(),
            items: z.array(z.lazy(() => AdjustmentCreateAdjustmentItem$.inboundSchema)),
            payout_totals: AdjustmentPayoutTotals$.inboundSchema.optional(),
            reason: z.string(),
            status: SchemaStatusAdjustment$.optional(),
            subscription_id: z.string().optional(),
            transaction_id: z.any().optional(),
        })
        .transform((v) => {
            return {
                action: v.action,
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                items: v.items,
                ...(v.payout_totals === undefined ? null : { payoutTotals: v.payout_totals }),
                reason: v.reason,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscription_id === undefined ? null : { subscriptionId: v.subscription_id }),
                ...(v.transaction_id === undefined ? null : { transactionId: v.transaction_id }),
            };
        });

    export type Outbound = {
        action: SchemaAction;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        id?: string | undefined;
        items: Array<AdjustmentCreateAdjustmentItem$.Outbound>;
        payout_totals?: AdjustmentPayoutTotals$.Outbound | undefined;
        reason: string;
        status?: SchemaStatusAdjustment | undefined;
        subscription_id?: string | undefined;
        transaction_id?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdjustmentCreate> = z
        .object({
            action: SchemaAction$,
            currencyCode: CurrencyCode2$.optional(),
            customerId: z.string().optional(),
            id: z.string().optional(),
            items: z.array(z.lazy(() => AdjustmentCreateAdjustmentItem$.outboundSchema)),
            payoutTotals: AdjustmentPayoutTotals$.outboundSchema.optional(),
            reason: z.string(),
            status: SchemaStatusAdjustment$.optional(),
            subscriptionId: z.string().optional(),
            transactionId: z.any().optional(),
        })
        .transform((v) => {
            return {
                action: v.action,
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.id === undefined ? null : { id: v.id }),
                items: v.items,
                ...(v.payoutTotals === undefined ? null : { payout_totals: v.payoutTotals }),
                reason: v.reason,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscriptionId === undefined ? null : { subscription_id: v.subscriptionId }),
                ...(v.transactionId === undefined ? null : { transaction_id: v.transactionId }),
            };
        });
}
