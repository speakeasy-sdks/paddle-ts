/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BillingDetails2 } from "./billingdetails2";
import { CollectionMode2 } from "./collectionmode2";
import { CurrencyCode2 } from "./currencycode2";
import { CustomData } from "./customdata";
import { OriginTransaction } from "./origintransaction";
import { SchemaStatusTransaction } from "./schemastatustransaction";
import { TimePeriod } from "./timeperiod";
import { TransactionDetails } from "./transactiondetails";
import { TransactionItem } from "./transactionitem";
import { TransactionPaymentAttempt } from "./transactionpaymentattempt";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Paddle Checkout details for this transaction. Always included for automatically-collected transactions. Included where `billing_details.enable_checkout` is `true` for manually-collected transactions.
 */
export class Transaction1Checkout extends SpeakeasyBase {
    /**
     * Paddle Checkout URL for this transaction, composed of your default payment URL + `_?txn=` and the Paddle ID for this transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;
}

/**
 * Represents a transaction entity.
 */
export class Transaction1 extends SpeakeasyBase {
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "address_id" })
    addressId?: string;

    /**
     * RFC 3339 datetime string.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billed_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    billedAt?: Date;

    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_details" })
    @Type(() => BillingDetails2)
    billingDetails?: BillingDetails2;

    @SpeakeasyMetadata()
    @Expose({ name: "billing_period" })
    @Type(() => TimePeriod)
    billingPeriod?: TimePeriod;

    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "business_id" })
    businessId?: string;

    /**
     * Paddle Checkout details for this transaction. Always included for automatically-collected transactions. Included where `billing_details.enable_checkout` is `true` for manually-collected transactions.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "checkout" })
    @Type(() => Transaction1Checkout)
    checkout?: Transaction1Checkout;

    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "collection_mode" })
    collectionMode?: CollectionMode2;

    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Supported three-letter ISO 4217 currency code.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency_code" })
    currencyCode?: CurrencyCode2;

    /**
     * Your own structured key-value data.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "custom_data" })
    @Type(() => CustomData)
    customData?: CustomData;

    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId?: string;

    /**
     * Calculated totals for a transaction, including proration, discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "details" })
    @Type(() => TransactionDetails)
    details?: TransactionDetails;

    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "discount_id" })
    discountId?: string;

    /**
     * Unique Paddle ID for this transaction entity, prefixed with `txn_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Paddle ID of the invoice that this transaction is related to, prefixed with `inv_`. Used for compatibility with the initial version of the Paddle Invoice API.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "invoice_id" })
    invoiceId?: string;

    /**
     * Invoice number for this transaction. Automatically generated by Paddle when you mark a transaction as `billed` where `collection_mode` is `manual`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "invoice_number" })
    invoiceNumber?: string;

    /**
     * List of items on this transaction. For calculated totals, use `details.line_items`.
     */
    @SpeakeasyMetadata({ elemType: TransactionItem })
    @Expose({ name: "items" })
    @Type(() => TransactionItem)
    items?: TransactionItem[];

    /**
     * Describes how this transaction was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "origin" })
    origin?: OriginTransaction;

    /**
     * List of payment attempts for this transaction, including successful payments. Sorted by `created_at` in descending order, so most recent attemps are returned first.
     */
    @SpeakeasyMetadata({ elemType: TransactionPaymentAttempt })
    @Expose({ name: "payments" })
    @Type(() => TransactionPaymentAttempt)
    payments?: TransactionPaymentAttempt[];

    /**
     * Status of this transaction. You may set a transaction to `billed` or `canceled`, other statuses are set automatically by Paddle.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: SchemaStatusTransaction;

    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subscription_id" })
    subscriptionId?: string;

    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}
