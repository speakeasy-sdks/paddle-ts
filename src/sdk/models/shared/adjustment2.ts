/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AdjustmentItemTotals, AdjustmentItemTotals$ } from "./adjustmentitemtotals";
import { AdjustmentPayoutTotals, AdjustmentPayoutTotals$ } from "./adjustmentpayouttotals";
import { AdjustmentTotals, AdjustmentTotals$ } from "./adjustmenttotals";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { SchemaAction, SchemaAction$ } from "./schemaaction";
import { SchemaStatusAdjustment, SchemaStatusAdjustment$ } from "./schemastatusadjustment";
import { TransactionItemProration, TransactionItemProration$ } from "./transactionitemproration";
import { z } from "zod";

/**
 * Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
 *
 * @remarks
 * Include `amount` when creating a `partial` adjustment.
 */
export enum Adjustment2Type {
    Full = "full",
    Partial = "partial",
    Tax = "tax",
    Proration = "proration",
}

export type AdjustmentItem = {
    /**
     * Amount adjusted before tax for this transaction item. Required when adjustment type is `partial`.
     */
    amount?: string | null | undefined;
    /**
     * Unique Paddle ID for this adjustment item, prefixed with `adjitm_`.
     */
    id?: string | undefined;
    /**
     * Unique Paddle ID for this transaction item, prefixed with `txnitm_`.
     */
    itemId: string;
    /**
     * How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
     */
    proration?: TransactionItemProration | undefined;
    /**
     * Breakdown of the total for an adjustment item.
     */
    totals?: AdjustmentItemTotals | undefined;
    /**
     * Type of adjustment for this transaction item. `tax` and `proration` are automatically created by Paddle.
     *
     * @remarks
     * Include `amount` when creating a `partial` adjustment.
     */
    type: Adjustment2Type;
};

/**
 * Represents an adjustment entity.
 */
export type Adjustment2 = {
    /**
     * How this adjustment impacts the related transaction. `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`. `chargeback` and `chargeback_warning` adjustments are created automatically by Paddle.
     */
    action?: SchemaAction | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Whether this adjustment was applied to the related customer's credit balance. Only returned for `credit` adjustments.
     *
     * @remarks
     *
     * `false` when the related transaction `collection_mode` is `manual` and its `status` is `billed`. The adjustment is used
     * to reduce the `balance` due on the the transaction.
     *
     * `true` for automatically-collected transactions and `completed`
     * manually-collected transactions.
     */
    creditAppliedToBalance?: boolean | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Unique Paddle ID for this adjustment entity, prefixed with `adj_`.
     */
    id?: string | undefined;
    /**
     * List of items on this adjustment.
     */
    items?: Array<AdjustmentItem> | undefined;
    /**
     * Breakdown of how this adjustment affects your payout balance.
     */
    payoutTotals?: AdjustmentPayoutTotals | undefined;
    /**
     * Why this adjustment was created. Appears in the Paddle Dashboard. Retained for record-keeping purposes.
     */
    reason?: string | undefined;
    /**
     * Status of this adjustment. Set automatically by Paddle.
     *
     * @remarks
     *
     * `refund` adjustments must be approved by Paddle, and are created with the status `pending_approval`
     * until they move to `approved` or `rejected` on review.  `credit` adjustments are created with the status `approved`.
     */
    status?: SchemaStatusAdjustment | undefined;
    /**
     * Unique Paddle ID for this subscription entity, prefixed with `sub_`.
     */
    subscriptionId?: string | undefined;
    /**
     * Breakdown of the total for an adjustment.
     */
    totals?: AdjustmentTotals | undefined;
    /**
     * Unique Paddle ID for this transaction entity, prefixed with `txn_`.
     */
    transactionId?: string | undefined;
    /**
     * RFC 3339 datetime string of when this entity was updated. Set automatically by Paddle.
     */
    updatedAt?: Date | undefined;
};

/** @internal */
export const Adjustment2Type$ = z.nativeEnum(Adjustment2Type);

/** @internal */
export namespace AdjustmentItem$ {
    export type Inbound = {
        amount?: string | null | undefined;
        id?: string | undefined;
        item_id: string;
        proration?: TransactionItemProration$.Inbound | undefined;
        totals?: AdjustmentItemTotals$.Inbound | undefined;
        type: Adjustment2Type;
    };

    export const inboundSchema: z.ZodType<AdjustmentItem, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            item_id: z.string(),
            proration: TransactionItemProration$.inboundSchema.optional(),
            totals: AdjustmentItemTotals$.inboundSchema.optional(),
            type: Adjustment2Type$,
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.id === undefined ? null : { id: v.id }),
                itemId: v.item_id,
                ...(v.proration === undefined ? null : { proration: v.proration }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                type: v.type,
            };
        });

    export type Outbound = {
        amount?: string | null | undefined;
        id?: string | undefined;
        item_id: string;
        proration?: TransactionItemProration$.Outbound | undefined;
        totals?: AdjustmentItemTotals$.Outbound | undefined;
        type: Adjustment2Type;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdjustmentItem> = z
        .object({
            amount: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            itemId: z.string(),
            proration: TransactionItemProration$.outboundSchema.optional(),
            totals: AdjustmentItemTotals$.outboundSchema.optional(),
            type: Adjustment2Type$,
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.id === undefined ? null : { id: v.id }),
                item_id: v.itemId,
                ...(v.proration === undefined ? null : { proration: v.proration }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                type: v.type,
            };
        });
}

/** @internal */
export namespace Adjustment2$ {
    export type Inbound = {
        action?: SchemaAction | undefined;
        created_at?: string | undefined;
        credit_applied_to_balance?: boolean | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        id?: string | undefined;
        items?: Array<AdjustmentItem$.Inbound> | undefined;
        payout_totals?: AdjustmentPayoutTotals$.Inbound | undefined;
        reason?: string | undefined;
        status?: SchemaStatusAdjustment | undefined;
        subscription_id?: string | undefined;
        totals?: AdjustmentTotals$.Inbound | undefined;
        transaction_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Adjustment2, z.ZodTypeDef, Inbound> = z
        .object({
            action: SchemaAction$.optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            credit_applied_to_balance: z.boolean().optional(),
            currency_code: CurrencyCode2$.optional(),
            customer_id: z.string().optional(),
            id: z.string().optional(),
            items: z.array(z.lazy(() => AdjustmentItem$.inboundSchema)).optional(),
            payout_totals: AdjustmentPayoutTotals$.inboundSchema.optional(),
            reason: z.string().optional(),
            status: SchemaStatusAdjustment$.optional(),
            subscription_id: z.string().optional(),
            totals: AdjustmentTotals$.inboundSchema.optional(),
            transaction_id: z.string().optional(),
            updated_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.credit_applied_to_balance === undefined
                    ? null
                    : { creditAppliedToBalance: v.credit_applied_to_balance }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.payout_totals === undefined ? null : { payoutTotals: v.payout_totals }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscription_id === undefined ? null : { subscriptionId: v.subscription_id }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.transaction_id === undefined ? null : { transactionId: v.transaction_id }),
                ...(v.updated_at === undefined ? null : { updatedAt: v.updated_at }),
            };
        });

    export type Outbound = {
        action?: SchemaAction | undefined;
        created_at?: string | undefined;
        credit_applied_to_balance?: boolean | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        id?: string | undefined;
        items?: Array<AdjustmentItem$.Outbound> | undefined;
        payout_totals?: AdjustmentPayoutTotals$.Outbound | undefined;
        reason?: string | undefined;
        status?: SchemaStatusAdjustment | undefined;
        subscription_id?: string | undefined;
        totals?: AdjustmentTotals$.Outbound | undefined;
        transaction_id?: string | undefined;
        updated_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Adjustment2> = z
        .object({
            action: SchemaAction$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            creditAppliedToBalance: z.boolean().optional(),
            currencyCode: CurrencyCode2$.optional(),
            customerId: z.string().optional(),
            id: z.string().optional(),
            items: z.array(z.lazy(() => AdjustmentItem$.outboundSchema)).optional(),
            payoutTotals: AdjustmentPayoutTotals$.outboundSchema.optional(),
            reason: z.string().optional(),
            status: SchemaStatusAdjustment$.optional(),
            subscriptionId: z.string().optional(),
            totals: AdjustmentTotals$.outboundSchema.optional(),
            transactionId: z.string().optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.creditAppliedToBalance === undefined
                    ? null
                    : { credit_applied_to_balance: v.creditAppliedToBalance }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.payoutTotals === undefined ? null : { payout_totals: v.payoutTotals }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.subscriptionId === undefined ? null : { subscription_id: v.subscriptionId }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.transactionId === undefined ? null : { transaction_id: v.transactionId }),
                ...(v.updatedAt === undefined ? null : { updated_at: v.updatedAt }),
            };
        });
}
