/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CustomerBalance = {
    /**
     * Total amount of credit available to use.
     */
    available?: string | undefined;
    /**
     * Total amount of credit temporarily reserved for `billed` transactions.
     */
    reserved?: string | undefined;
    /**
     * Total amount of credit used.
     */
    used?: string | undefined;
};

/** @internal */
export namespace CustomerBalance$ {
    export type Inbound = {
        available?: string | undefined;
        reserved?: string | undefined;
        used?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CustomerBalance, z.ZodTypeDef, Inbound> = z
        .object({
            available: z.string().optional(),
            reserved: z.string().optional(),
            used: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.available === undefined ? null : { available: v.available }),
                ...(v.reserved === undefined ? null : { reserved: v.reserved }),
                ...(v.used === undefined ? null : { used: v.used }),
            };
        });

    export type Outbound = {
        available?: string | undefined;
        reserved?: string | undefined;
        used?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomerBalance> = z
        .object({
            available: z.string().optional(),
            reserved: z.string().optional(),
            used: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.available === undefined ? null : { available: v.available }),
                ...(v.reserved === undefined ? null : { reserved: v.reserved }),
                ...(v.used === undefined ? null : { used: v.used }),
            };
        });
}
