/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EventType, EventType$ } from "./eventtype";
import { z } from "zod";

/**
 * Where notifications should be sent for this destination.
 */
export enum NotificationSettingCompleteType {
    Email = "email",
    Url = "url",
}

/**
 * Represents a notification destination.
 */
export type NotificationSettingComplete = {
    /**
     * Whether Paddle should try to deliver events to this notification destination.
     */
    active?: boolean | undefined;
    /**
     * API version that returned objects for events should conform to. Must be a valid version of the Paddle API. Cannot be a version older than your account default. Defaults to your account default if not included.
     */
    apiVersion?: number | undefined;
    /**
     * Short description for this notification destination. Shown in the Paddle Dashboard.
     */
    description?: string | undefined;
    /**
     * Webhook endpoint URL or email address.
     */
    destination?: string | undefined;
    /**
     * Webhook destination secret key, prefixed with `pdl_ntfset_`. Used for signature verification.
     */
    endpointSecretKey?: string | undefined;
    /**
     * Unique Paddle ID for this notification setting, prefixed with `ntfset_`.
     */
    id?: string | undefined;
    /**
     * Whether potentially sensitive fields should be sent to this notification destination.
     */
    includeSensitiveFields?: boolean | undefined;
    subscribedEvents?: Array<EventType> | undefined;
    /**
     * Where notifications should be sent for this destination.
     */
    type?: NotificationSettingCompleteType | undefined;
};

/** @internal */
export const NotificationSettingCompleteType$ = z.nativeEnum(NotificationSettingCompleteType);

/** @internal */
export namespace NotificationSettingComplete$ {
    export type Inbound = {
        active?: boolean | undefined;
        api_version?: number | undefined;
        description?: string | undefined;
        destination?: string | undefined;
        endpoint_secret_key?: string | undefined;
        id?: string | undefined;
        include_sensitive_fields?: boolean | undefined;
        subscribed_events?: Array<EventType$.Inbound> | undefined;
        type?: NotificationSettingCompleteType | undefined;
    };

    export const inboundSchema: z.ZodType<NotificationSettingComplete, z.ZodTypeDef, Inbound> = z
        .object({
            active: z.boolean().default(true),
            api_version: z.number().int().optional(),
            description: z.string().optional(),
            destination: z.string().optional(),
            endpoint_secret_key: z.string().optional(),
            id: z.string().optional(),
            include_sensitive_fields: z.boolean().default(false),
            subscribed_events: z.array(EventType$.inboundSchema).optional(),
            type: NotificationSettingCompleteType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.api_version === undefined ? null : { apiVersion: v.api_version }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.endpoint_secret_key === undefined
                    ? null
                    : { endpointSecretKey: v.endpoint_secret_key }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.include_sensitive_fields === undefined
                    ? null
                    : { includeSensitiveFields: v.include_sensitive_fields }),
                ...(v.subscribed_events === undefined
                    ? null
                    : { subscribedEvents: v.subscribed_events }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        active: boolean;
        api_version?: number | undefined;
        description?: string | undefined;
        destination?: string | undefined;
        endpoint_secret_key?: string | undefined;
        id?: string | undefined;
        include_sensitive_fields: boolean;
        subscribed_events?: Array<EventType$.Outbound> | undefined;
        type?: NotificationSettingCompleteType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationSettingComplete> = z
        .object({
            active: z.boolean().default(true),
            apiVersion: z.number().int().optional(),
            description: z.string().optional(),
            destination: z.string().optional(),
            endpointSecretKey: z.string().optional(),
            id: z.string().optional(),
            includeSensitiveFields: z.boolean().default(false),
            subscribedEvents: z.array(EventType$.outboundSchema).optional(),
            type: NotificationSettingCompleteType$.optional(),
        })
        .transform((v) => {
            return {
                active: v.active,
                ...(v.apiVersion === undefined ? null : { api_version: v.apiVersion }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
                ...(v.endpointSecretKey === undefined
                    ? null
                    : { endpoint_secret_key: v.endpointSecretKey }),
                ...(v.id === undefined ? null : { id: v.id }),
                include_sensitive_fields: v.includeSensitiveFields,
                ...(v.subscribedEvents === undefined
                    ? null
                    : { subscribed_events: v.subscribedEvents }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
