/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Totals1, Totals1$ } from "./totals1";
import {
    TransactionPreviewLineItem,
    TransactionPreviewLineItem$,
} from "./transactionpreviewlineitem";
import { TransactionTotals, TransactionTotals$ } from "./transactiontotals";
import { z } from "zod";

export type TransactionPreviewDetailsTaxRatesUsed = {
    /**
     * Rate used to calculate tax for this transaction preview.
     */
    taxRate?: string | undefined;
    /**
     * Breakdown of a charge in the lowest denomination of a currency (e.g. cents for USD).
     */
    totals?: Totals1 | undefined;
};

/**
 * Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
 */
export type TransactionPreviewDetails = {
    /**
     * Information about line items for this transaction preview. Different from transaction preview `items` as they include totals calculated by Paddle. Considered the source of truth for line item totals.
     */
    lineItems?: Array<TransactionPreviewLineItem> | undefined;
    /**
     * List of tax rates applied to this transaction preview.
     */
    taxRatesUsed?: Array<TransactionPreviewDetailsTaxRatesUsed> | undefined;
    /**
     * Breakdown of the total for a transaction.
     */
    totals?: TransactionTotals | undefined;
};

/** @internal */
export namespace TransactionPreviewDetailsTaxRatesUsed$ {
    export type Inbound = {
        tax_rate?: string | undefined;
        totals?: Totals1$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        TransactionPreviewDetailsTaxRatesUsed,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            tax_rate: z.string().optional(),
            totals: Totals1$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });

    export type Outbound = {
        tax_rate?: string | undefined;
        totals?: Totals1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPreviewDetailsTaxRatesUsed
    > = z
        .object({
            taxRate: z.string().optional(),
            totals: Totals1$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });
}

/** @internal */
export namespace TransactionPreviewDetails$ {
    export type Inbound = {
        line_items?: Array<TransactionPreviewLineItem$.Inbound> | undefined;
        tax_rates_used?: Array<TransactionPreviewDetailsTaxRatesUsed$.Inbound> | undefined;
        totals?: TransactionTotals$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionPreviewDetails, z.ZodTypeDef, Inbound> = z
        .object({
            line_items: z.array(TransactionPreviewLineItem$.inboundSchema).optional(),
            tax_rates_used: z
                .array(z.lazy(() => TransactionPreviewDetailsTaxRatesUsed$.inboundSchema))
                .optional(),
            totals: TransactionTotals$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.line_items === undefined ? null : { lineItems: v.line_items }),
                ...(v.tax_rates_used === undefined ? null : { taxRatesUsed: v.tax_rates_used }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });

    export type Outbound = {
        line_items?: Array<TransactionPreviewLineItem$.Outbound> | undefined;
        tax_rates_used?: Array<TransactionPreviewDetailsTaxRatesUsed$.Outbound> | undefined;
        totals?: TransactionTotals$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPreviewDetails> = z
        .object({
            lineItems: z.array(TransactionPreviewLineItem$.outboundSchema).optional(),
            taxRatesUsed: z
                .array(z.lazy(() => TransactionPreviewDetailsTaxRatesUsed$.outboundSchema))
                .optional(),
            totals: TransactionTotals$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.lineItems === undefined ? null : { line_items: v.lineItems }),
                ...(v.taxRatesUsed === undefined ? null : { tax_rates_used: v.taxRatesUsed }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });
}
