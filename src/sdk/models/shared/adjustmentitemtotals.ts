/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Breakdown of the total for an adjustment item.
 */
export type AdjustmentItemTotals = {
    /**
     * Amount multiplied by quantity.
     */
    subtotal?: string | undefined;
    /**
     * Total tax on the subtotal.
     */
    tax?: string | undefined;
    /**
     * Total after tax.
     */
    total?: string | undefined;
};

/** @internal */
export namespace AdjustmentItemTotals$ {
    export type Inbound = {
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AdjustmentItemTotals, z.ZodTypeDef, Inbound> = z
        .object({
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdjustmentItemTotals> = z
        .object({
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
