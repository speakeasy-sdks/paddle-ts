/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Product, Product$ } from "./product";
import { Totals2, Totals2$ } from "./totals2";
import { z } from "zod";

export type LineItems = {
    /**
     * Represents a product entity.
     */
    product?: Product | undefined;
    quantity?: number | undefined;
    taxRate?: string | undefined;
    /**
     * The financial breakdown of a charge in the lowest denomination of a currency (eg cents for USD).
     */
    totals?: Totals2 | undefined;
    /**
     * The financial breakdown of a charge in the lowest denomination of a currency (eg cents for USD).
     */
    unitTotals?: Totals2 | undefined;
};

export type InvoiceDetails = {
    lineItems?: Array<LineItems> | undefined;
    /**
     * The financial breakdown of a charge in the lowest denomination of a currency (eg cents for USD).
     */
    totals?: Totals2 | undefined;
};

/** @internal */
export namespace LineItems$ {
    export type Inbound = {
        product?: Product$.Inbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals2$.Inbound | undefined;
        unit_totals?: Totals2$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<LineItems, z.ZodTypeDef, Inbound> = z
        .object({
            product: Product$.inboundSchema.optional(),
            quantity: z.number().int().optional(),
            tax_rate: z.string().optional(),
            totals: Totals2$.inboundSchema.optional(),
            unit_totals: Totals2$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.tax_rate === undefined ? null : { taxRate: v.tax_rate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unit_totals === undefined ? null : { unitTotals: v.unit_totals }),
            };
        });

    export type Outbound = {
        product?: Product$.Outbound | undefined;
        quantity?: number | undefined;
        tax_rate?: string | undefined;
        totals?: Totals2$.Outbound | undefined;
        unit_totals?: Totals2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LineItems> = z
        .object({
            product: Product$.outboundSchema.optional(),
            quantity: z.number().int().optional(),
            taxRate: z.string().optional(),
            totals: Totals2$.outboundSchema.optional(),
            unitTotals: Totals2$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.product === undefined ? null : { product: v.product }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.taxRate === undefined ? null : { tax_rate: v.taxRate }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
                ...(v.unitTotals === undefined ? null : { unit_totals: v.unitTotals }),
            };
        });
}

/** @internal */
export namespace InvoiceDetails$ {
    export type Inbound = {
        line_items?: Array<LineItems$.Inbound> | undefined;
        totals?: Totals2$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<InvoiceDetails, z.ZodTypeDef, Inbound> = z
        .object({
            line_items: z.array(z.lazy(() => LineItems$.inboundSchema)).optional(),
            totals: Totals2$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.line_items === undefined ? null : { lineItems: v.line_items }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });

    export type Outbound = {
        line_items?: Array<LineItems$.Outbound> | undefined;
        totals?: Totals2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceDetails> = z
        .object({
            lineItems: z.array(z.lazy(() => LineItems$.outboundSchema)).optional(),
            totals: Totals2$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.lineItems === undefined ? null : { line_items: v.lineItems }),
                ...(v.totals === undefined ? null : { totals: v.totals }),
            };
        });
}
