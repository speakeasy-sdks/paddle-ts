/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomData, CustomData$ } from "./customdata";
import { Money2, Money2$ } from "./money2";
import { Period2, Period2$ } from "./period2";
import { PriceQuantity, PriceQuantity$ } from "./pricequantity";
import { TaxCategory1, TaxCategory1$ } from "./taxcategory1";
import { TaxMode1, TaxMode1$ } from "./taxmode1";
import { UnitPriceOverride, UnitPriceOverride$ } from "./unitpriceoverride";
import { z } from "zod";

/**
 * Represents a price entity with included entities.
 */
export type PriceIncludes = {
    /**
     * How often this price should be charged. `null` if price is non-recurring (one-time).
     */
    billingCycle?: Period2 | null | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: CustomData | null | undefined;
    /**
     * Short description for this product. Included in the checkout and on some customer documents.
     */
    description?: string | null | undefined;
    /**
     * Unique Paddle ID for this product, prefixed with `pro_`.
     */
    id?: string | undefined;
    /**
     * Image for this product. Included in the checkout and on some customer documents.
     */
    imageUrl?: string | null | undefined;
    /**
     * Name of this product.
     */
    name?: string | undefined;
    /**
     * Unique Paddle ID for this product, prefixed with `pro_`.
     */
    productId?: string | undefined;
    quantity?: PriceQuantity | undefined;
    status?: any | undefined;
    /**
     * Tax category for this product. Used for charging the correct rate of tax. Selected tax category must be enabled on your Paddle account.
     */
    taxCategory?: TaxCategory1 | undefined;
    /**
     * How tax is calculated for this price.
     */
    taxMode?: TaxMode1 | undefined;
    /**
     * Trial period for the product related to this price. The billing cycle begins once the trial period is over. `null` for no trial period. Requires `billing_cycle`.
     */
    trialPeriod?: Period2 | null | undefined;
    unitPrice?: Money2 | undefined;
    /**
     * List of unit price overrides. Use to override the base price with a custom price and currency for a country or group of countries.
     */
    unitPriceOverrides?: Array<UnitPriceOverride> | undefined;
};

/** @internal */
export namespace PriceIncludes$ {
    export type Inbound = {
        billing_cycle?: Period2$.Inbound | null | undefined;
        created_at?: string | undefined;
        custom_data?: CustomData$.Inbound | null | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        image_url?: string | null | undefined;
        name?: string | undefined;
        product_id?: string | undefined;
        quantity?: PriceQuantity$.Inbound | undefined;
        status?: any | undefined;
        tax_category?: TaxCategory1 | undefined;
        tax_mode?: TaxMode1 | undefined;
        trial_period?: Period2$.Inbound | null | undefined;
        unit_price?: Money2$.Inbound | undefined;
        unit_price_overrides?: Array<UnitPriceOverride$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PriceIncludes, z.ZodTypeDef, Inbound> = z
        .object({
            billing_cycle: z.nullable(Period2$.inboundSchema).optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            custom_data: z.nullable(CustomData$.inboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            image_url: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            product_id: z.string().optional(),
            quantity: PriceQuantity$.inboundSchema.optional(),
            status: z.any().optional(),
            tax_category: TaxCategory1$.optional(),
            tax_mode: TaxMode1$.default(TaxMode1.AccountSetting),
            trial_period: z.nullable(Period2$.inboundSchema).optional(),
            unit_price: Money2$.inboundSchema.optional(),
            unit_price_overrides: z.array(UnitPriceOverride$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.billing_cycle === undefined ? null : { billingCycle: v.billing_cycle }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.image_url === undefined ? null : { imageUrl: v.image_url }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.product_id === undefined ? null : { productId: v.product_id }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.tax_category === undefined ? null : { taxCategory: v.tax_category }),
                ...(v.tax_mode === undefined ? null : { taxMode: v.tax_mode }),
                ...(v.trial_period === undefined ? null : { trialPeriod: v.trial_period }),
                ...(v.unit_price === undefined ? null : { unitPrice: v.unit_price }),
                ...(v.unit_price_overrides === undefined
                    ? null
                    : { unitPriceOverrides: v.unit_price_overrides }),
            };
        });

    export type Outbound = {
        billing_cycle?: Period2$.Outbound | null | undefined;
        created_at?: string | undefined;
        custom_data?: CustomData$.Outbound | null | undefined;
        description?: string | null | undefined;
        id?: string | undefined;
        image_url?: string | null | undefined;
        name?: string | undefined;
        product_id?: string | undefined;
        quantity?: PriceQuantity$.Outbound | undefined;
        status?: any | undefined;
        tax_category?: TaxCategory1 | undefined;
        tax_mode: TaxMode1;
        trial_period?: Period2$.Outbound | null | undefined;
        unit_price?: Money2$.Outbound | undefined;
        unit_price_overrides?: Array<UnitPriceOverride$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PriceIncludes> = z
        .object({
            billingCycle: z.nullable(Period2$.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            customData: z.nullable(CustomData$.outboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            id: z.string().optional(),
            imageUrl: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            productId: z.string().optional(),
            quantity: PriceQuantity$.outboundSchema.optional(),
            status: z.any().optional(),
            taxCategory: TaxCategory1$.optional(),
            taxMode: TaxMode1$.default(TaxMode1.AccountSetting),
            trialPeriod: z.nullable(Period2$.outboundSchema).optional(),
            unitPrice: Money2$.outboundSchema.optional(),
            unitPriceOverrides: z.array(UnitPriceOverride$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.billingCycle === undefined ? null : { billing_cycle: v.billingCycle }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.imageUrl === undefined ? null : { image_url: v.imageUrl }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.productId === undefined ? null : { product_id: v.productId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.taxCategory === undefined ? null : { tax_category: v.taxCategory }),
                tax_mode: v.taxMode,
                ...(v.trialPeriod === undefined ? null : { trial_period: v.trialPeriod }),
                ...(v.unitPrice === undefined ? null : { unit_price: v.unitPrice }),
                ...(v.unitPriceOverrides === undefined
                    ? null
                    : { unit_price_overrides: v.unitPriceOverrides }),
            };
        });
}
