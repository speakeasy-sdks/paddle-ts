/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { z } from "zod";

/**
 * Type of discount.
 */
export enum TypeT {
    Flat = "flat",
    FlatPerSeat = "flat_per_seat",
    Percentage = "percentage",
}

/**
 * Represents a discount entity.
 */
export type DiscountCreate = {
    /**
     * Amount to discount by. For `percentage` discounts, must be an amount between `0.01` and `100`. For `flat` and `flat_per_seat` discounts, amount in the lowest denomination for a currency.
     */
    amount: string;
    /**
     * Unique code that customers can use to apply this discount at checkout. Use letters and numbers only, up to 16 characters. Paddle generates a random 10-character code if a code is not provided and `enabled_for_checkout` is `true`.
     */
    code?: string | null | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Short description for this discount for your reference. Not shown to customers.
     */
    description: string;
    /**
     * Whether this discount can be applied by a customer at checkout.
     */
    enabledForCheckout?: boolean | undefined;
    /**
     * RFC 3339 datetime string.
     */
    expiresAt?: Date | undefined;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    id?: string | undefined;
    /**
     * Amount of subscription billing periods that this discount recurs for. Requires `recur`. `null` if this discount recurs forever.
     */
    maximumRecurringIntervals?: number | null | undefined;
    /**
     * Whether this discount applies for multiple billing periods.
     */
    recur?: boolean | undefined;
    /**
     * Product or price IDs that this discount is for. When including a product ID, all prices for that product can be discounted. `null` if this discount applies to all products and prices.
     */
    restrictTo?: Array<string> | null | undefined;
    /**
     * Type of discount.
     */
    type: TypeT;
    /**
     * Maximum amount of times this discount can be used. This is an overall limit, rather than a per-customer limit. `null` if this discount can be used an unlimited amount of times.
     */
    usageLimit?: number | null | undefined;
};

/** @internal */
export const TypeT$ = z.nativeEnum(TypeT);

/** @internal */
export namespace DiscountCreate$ {
    export type Inbound = {
        amount: string;
        code?: string | null | undefined;
        currency_code?: CurrencyCode2 | undefined;
        description: string;
        enabled_for_checkout?: boolean | undefined;
        expires_at?: string | undefined;
        id?: string | undefined;
        maximum_recurring_intervals?: number | null | undefined;
        recur?: boolean | undefined;
        restrict_to?: Array<string> | null | undefined;
        type: TypeT;
        usage_limit?: number | null | undefined;
    };

    export const inboundSchema: z.ZodType<DiscountCreate, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.string(),
            code: z.nullable(z.string()).optional(),
            currency_code: CurrencyCode2$.optional(),
            description: z.string(),
            enabled_for_checkout: z.boolean().default(true),
            expires_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            maximum_recurring_intervals: z.nullable(z.number().int()).optional(),
            recur: z.boolean().default(false),
            restrict_to: z.nullable(z.array(z.string())).optional(),
            type: TypeT$,
            usage_limit: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                description: v.description,
                ...(v.enabled_for_checkout === undefined
                    ? null
                    : { enabledForCheckout: v.enabled_for_checkout }),
                ...(v.expires_at === undefined ? null : { expiresAt: v.expires_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.maximum_recurring_intervals === undefined
                    ? null
                    : { maximumRecurringIntervals: v.maximum_recurring_intervals }),
                ...(v.recur === undefined ? null : { recur: v.recur }),
                ...(v.restrict_to === undefined ? null : { restrictTo: v.restrict_to }),
                type: v.type,
                ...(v.usage_limit === undefined ? null : { usageLimit: v.usage_limit }),
            };
        });

    export type Outbound = {
        amount: string;
        code?: string | null | undefined;
        currency_code?: CurrencyCode2 | undefined;
        description: string;
        enabled_for_checkout: boolean;
        expires_at?: string | undefined;
        id?: string | undefined;
        maximum_recurring_intervals?: number | null | undefined;
        recur: boolean;
        restrict_to?: Array<string> | null | undefined;
        type: TypeT;
        usage_limit?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DiscountCreate> = z
        .object({
            amount: z.string(),
            code: z.nullable(z.string()).optional(),
            currencyCode: CurrencyCode2$.optional(),
            description: z.string(),
            enabledForCheckout: z.boolean().default(true),
            expiresAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            maximumRecurringIntervals: z.nullable(z.number().int()).optional(),
            recur: z.boolean().default(false),
            restrictTo: z.nullable(z.array(z.string())).optional(),
            type: TypeT$,
            usageLimit: z.nullable(z.number().int()).optional(),
        })
        .transform((v) => {
            return {
                amount: v.amount,
                ...(v.code === undefined ? null : { code: v.code }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                description: v.description,
                enabled_for_checkout: v.enabledForCheckout,
                ...(v.expiresAt === undefined ? null : { expires_at: v.expiresAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.maximumRecurringIntervals === undefined
                    ? null
                    : { maximum_recurring_intervals: v.maximumRecurringIntervals }),
                recur: v.recur,
                ...(v.restrictTo === undefined ? null : { restrict_to: v.restrictTo }),
                type: v.type,
                ...(v.usageLimit === undefined ? null : { usage_limit: v.usageLimit }),
            };
        });
}
