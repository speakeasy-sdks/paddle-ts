/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../../sdk/types";
import { BillingDetails1 } from "./billingdetails1";
import { CurrencyCodeInvoice } from "./currencycodeinvoice";
import { CustomDataInvoice } from "./customdatainvoice";
import { InvoiceDetails, InvoiceDetailsInput } from "./invoicedetails";
import { InvoiceItem } from "./invoiceitem";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The billing period type is set to `billing` for subscriptions.
 */
export enum InvoiceType {
    Billing = "billing",
    Contract = "contract",
    Service = "service",
}

export class BillingPeriod extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ends_at" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    endsAt: RFCDate;

    @SpeakeasyMetadata()
    @Expose({ name: "starts_at" })
    @Type(() => String)
    @Transform(({ value }) => new RFCDate(value), { toClassOnly: true })
    startsAt: RFCDate;

    /**
     * The billing period type is set to `billing` for subscriptions.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: InvoiceType;
}

export class Checkout extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;
}

/**
 * The status of the invoice. Most of statuses are self-explanatory. `pending_acceptance` is a state equivalent of `unpaid` but represents the fact that the customer has not yet accept Paddle's invoicing MoR terms and conditions.
 */
export enum InvoiceStatus {
    Paid = "paid",
    Overdue = "overdue",
    PendingAcceptance = "pending_acceptance",
    Unpaid = "unpaid",
    Canceled = "canceled",
    Draft = "draft",
}

export class Invoice extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address_id" })
    addressId: string;

    /**
     * Details for invoicing. Required if `collection_mode` is set to `manual`. Otherwise must be `null`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_details" })
    @Type(() => BillingDetails1)
    billingDetails: BillingDetails1;

    @SpeakeasyMetadata()
    @Expose({ name: "billing_period" })
    @Type(() => BillingPeriod)
    billingPeriod?: BillingPeriod;

    @SpeakeasyMetadata()
    @Expose({ name: "business_id" })
    businessId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "checkout" })
    @Type(() => Checkout)
    checkout?: Checkout;

    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    /**
     * Currency codes accepted for invoice. Current accepted currencies for invoice: EUR, GPB and USD.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency_code" })
    currencyCode: CurrencyCodeInvoice;

    /**
     * Key/value pairs of any custom data
     */
    @SpeakeasyMetadata()
    @Expose({ name: "custom_data" })
    @Type(() => CustomDataInvoice)
    customData: CustomDataInvoice;

    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "details" })
    @Type(() => InvoiceDetails)
    details?: InvoiceDetails;

    @SpeakeasyMetadata()
    @Expose({ name: "due_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dueAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "invoice_number" })
    invoiceNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "issued_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    issuedAt?: Date;

    @SpeakeasyMetadata({ elemType: InvoiceItem })
    @Expose({ name: "items" })
    @Type(() => InvoiceItem)
    items: InvoiceItem[];

    @SpeakeasyMetadata()
    @Expose({ name: "paid_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    paidAt?: Date;

    /**
     * The status of the invoice. Most of statuses are self-explanatory. `pending_acceptance` is a state equivalent of `unpaid` but represents the fact that the customer has not yet accept Paddle's invoicing MoR terms and conditions.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: InvoiceStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "transaction_id" })
    transactionId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;
}

export class InvoiceInput extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address_id" })
    addressId: string;

    /**
     * Details for invoicing. Required if `collection_mode` is set to `manual`. Otherwise must be `null`.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "billing_details" })
    @Type(() => BillingDetails1)
    billingDetails: BillingDetails1;

    @SpeakeasyMetadata()
    @Expose({ name: "billing_period" })
    @Type(() => BillingPeriod)
    billingPeriod?: BillingPeriod;

    @SpeakeasyMetadata()
    @Expose({ name: "business_id" })
    businessId?: string;

    /**
     * Currency codes accepted for invoice. Current accepted currencies for invoice: EUR, GPB and USD.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency_code" })
    currencyCode: CurrencyCodeInvoice;

    /**
     * Key/value pairs of any custom data
     */
    @SpeakeasyMetadata()
    @Expose({ name: "custom_data" })
    @Type(() => CustomDataInvoice)
    customData: CustomDataInvoice;

    @SpeakeasyMetadata()
    @Expose({ name: "customer_id" })
    customerId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "details" })
    @Type(() => InvoiceDetailsInput)
    details?: InvoiceDetailsInput;

    @SpeakeasyMetadata({ elemType: InvoiceItem })
    @Expose({ name: "items" })
    @Type(() => InvoiceItem)
    items: InvoiceItem[];
}
