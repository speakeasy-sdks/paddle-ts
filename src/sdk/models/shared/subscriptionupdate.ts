/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BillingDetails2, BillingDetails2$ } from "./billingdetails2";
import { CollectionMode2, CollectionMode2$ } from "./collectionmode2";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { CustomData, CustomData$ } from "./customdata";
import { EffectiveFrom, EffectiveFrom$ } from "./effectivefrom";
import { SubscriptionUpdateItem, SubscriptionUpdateItem$ } from "./subscriptionupdateitem";
import {
    SubscriptionUpdateProrationBillingMode,
    SubscriptionUpdateProrationBillingMode$,
} from "./subscriptionupdateprorationbillingmode";
import { z } from "zod";

/**
 * Details of the discount applied to this subscription. Include to add a discount to a subscription. `null` to remove a discount.
 */
export type SubscriptionUpdateDiscount = {
    /**
     * When this scheduled change should take effect from. `immediately` is only allowed when canceling or resuming a paused subscription.
     */
    effectiveFrom: EffectiveFrom;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    id: string;
};

/**
 * Represents a subscription entity.
 */
export type SubscriptionUpdate = {
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    /**
     * Details for invoicing. Required if `collection_mode` is `manual`.
     */
    billingDetails?: BillingDetails2 | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * How payment is collected. `automatic` for checkout, `manual` for invoices.
     */
    collectionMode?: CollectionMode2 | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Your own structured key-value data.
     */
    customData?: CustomData | null | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * Details of the discount applied to this subscription. Include to add a discount to a subscription. `null` to remove a discount.
     */
    discount?: SubscriptionUpdateDiscount | null | undefined;
    /**
     * List of items on this subscription. Only recurring items may be added. Send the complete list of items that should be on this subscription, including existing items to retain.
     */
    items?: Array<SubscriptionUpdateItem> | undefined;
    /**
     * RFC 3339 datetime string.
     */
    nextBilledAt?: Date | undefined;
    /**
     * How Paddle should handle proration calculation for changes made to a subscription or its items. Required when making changes that impact billing.
     */
    prorationBillingMode?: SubscriptionUpdateProrationBillingMode | undefined;
    /**
     * Change that's scheduled to be applied to a subscription. When updating, you may only set to `null` to remove a scheduled change. Use the pause subscription, cancel subscription, and resume subscription operations to create scheduled changes.
     */
    scheduledChange?: any | null | undefined;
};

/** @internal */
export namespace SubscriptionUpdateDiscount$ {
    export type Inbound = {
        effective_from: EffectiveFrom;
        id: string;
    };

    export const inboundSchema: z.ZodType<SubscriptionUpdateDiscount, z.ZodTypeDef, Inbound> = z
        .object({
            effective_from: EffectiveFrom$,
            id: z.string(),
        })
        .transform((v) => {
            return {
                effectiveFrom: v.effective_from,
                id: v.id,
            };
        });

    export type Outbound = {
        effective_from: EffectiveFrom;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriptionUpdateDiscount> = z
        .object({
            effectiveFrom: EffectiveFrom$,
            id: z.string(),
        })
        .transform((v) => {
            return {
                effective_from: v.effectiveFrom,
                id: v.id,
            };
        });
}

/** @internal */
export namespace SubscriptionUpdate$ {
    export type Inbound = {
        address_id?: string | undefined;
        billing_details?: BillingDetails2$.Inbound | undefined;
        business_id?: string | undefined;
        collection_mode?: CollectionMode2 | undefined;
        currency_code?: CurrencyCode2 | undefined;
        custom_data?: CustomData$.Inbound | null | undefined;
        customer_id?: string | undefined;
        discount?: SubscriptionUpdateDiscount$.Inbound | null | undefined;
        items?: Array<SubscriptionUpdateItem$.Inbound> | undefined;
        next_billed_at?: string | undefined;
        proration_billing_mode?: SubscriptionUpdateProrationBillingMode | undefined;
        scheduled_change?: any | null | undefined;
    };

    export const inboundSchema: z.ZodType<SubscriptionUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            address_id: z.string().optional(),
            billing_details: BillingDetails2$.inboundSchema.optional(),
            business_id: z.string().optional(),
            collection_mode: CollectionMode2$.default(CollectionMode2.Automatic),
            currency_code: CurrencyCode2$.optional(),
            custom_data: z.nullable(CustomData$.inboundSchema).optional(),
            customer_id: z.string().optional(),
            discount: z
                .nullable(z.lazy(() => SubscriptionUpdateDiscount$.inboundSchema))
                .optional(),
            items: z.array(SubscriptionUpdateItem$.inboundSchema).optional(),
            next_billed_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            proration_billing_mode: SubscriptionUpdateProrationBillingMode$.optional(),
            scheduled_change: z.nullable(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.billing_details === undefined ? null : { billingDetails: v.billing_details }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.collection_mode === undefined ? null : { collectionMode: v.collection_mode }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.custom_data === undefined ? null : { customData: v.custom_data }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.next_billed_at === undefined ? null : { nextBilledAt: v.next_billed_at }),
                ...(v.proration_billing_mode === undefined
                    ? null
                    : { prorationBillingMode: v.proration_billing_mode }),
                ...(v.scheduled_change === undefined
                    ? null
                    : { scheduledChange: v.scheduled_change }),
            };
        });

    export type Outbound = {
        address_id?: string | undefined;
        billing_details?: BillingDetails2$.Outbound | undefined;
        business_id?: string | undefined;
        collection_mode: CollectionMode2;
        currency_code?: CurrencyCode2 | undefined;
        custom_data?: CustomData$.Outbound | null | undefined;
        customer_id?: string | undefined;
        discount?: SubscriptionUpdateDiscount$.Outbound | null | undefined;
        items?: Array<SubscriptionUpdateItem$.Outbound> | undefined;
        next_billed_at?: string | undefined;
        proration_billing_mode?: SubscriptionUpdateProrationBillingMode | undefined;
        scheduled_change?: any | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriptionUpdate> = z
        .object({
            addressId: z.string().optional(),
            billingDetails: BillingDetails2$.outboundSchema.optional(),
            businessId: z.string().optional(),
            collectionMode: CollectionMode2$.default(CollectionMode2.Automatic),
            currencyCode: CurrencyCode2$.optional(),
            customData: z.nullable(CustomData$.outboundSchema).optional(),
            customerId: z.string().optional(),
            discount: z
                .nullable(z.lazy(() => SubscriptionUpdateDiscount$.outboundSchema))
                .optional(),
            items: z.array(SubscriptionUpdateItem$.outboundSchema).optional(),
            nextBilledAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            prorationBillingMode: SubscriptionUpdateProrationBillingMode$.optional(),
            scheduledChange: z.nullable(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.billingDetails === undefined ? null : { billing_details: v.billingDetails }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                collection_mode: v.collectionMode,
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customData === undefined ? null : { custom_data: v.customData }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.nextBilledAt === undefined ? null : { next_billed_at: v.nextBilledAt }),
                ...(v.prorationBillingMode === undefined
                    ? null
                    : { proration_billing_mode: v.prorationBillingMode }),
                ...(v.scheduledChange === undefined
                    ? null
                    : { scheduled_change: v.scheduledChange }),
            };
        });
}
