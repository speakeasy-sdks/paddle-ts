/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Price, Price$ } from "./price";
import { TransactionItemProration, TransactionItemProration$ } from "./transactionitemproration";
import { z } from "zod";

export type TransactionItem = {
    /**
     * Represents a price entity.
     */
    price?: Price | undefined;
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId: string;
    /**
     * How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
     */
    proration?: TransactionItemProration | undefined;
    /**
     * Quantity of this item on the transaction.
     */
    quantity: number;
};

/** @internal */
export namespace TransactionItem$ {
    export type Inbound = {
        price?: Price$.Inbound | undefined;
        price_id: string;
        proration?: TransactionItemProration$.Inbound | undefined;
        quantity: number;
    };

    export const inboundSchema: z.ZodType<TransactionItem, z.ZodTypeDef, Inbound> = z
        .object({
            price: Price$.inboundSchema.optional(),
            price_id: z.string(),
            proration: TransactionItemProration$.inboundSchema.optional(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                priceId: v.price_id,
                ...(v.proration === undefined ? null : { proration: v.proration }),
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        price?: Price$.Outbound | undefined;
        price_id: string;
        proration?: TransactionItemProration$.Outbound | undefined;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionItem> = z
        .object({
            price: Price$.outboundSchema.optional(),
            priceId: z.string(),
            proration: TransactionItemProration$.outboundSchema.optional(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                price_id: v.priceId,
                ...(v.proration === undefined ? null : { proration: v.proration }),
                quantity: v.quantity,
            };
        });
}
