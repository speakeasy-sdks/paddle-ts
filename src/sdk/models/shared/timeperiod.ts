/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TimePeriod = {
    /**
     * RFC 3339 datetime string.
     */
    endsAt: Date;
    /**
     * RFC 3339 datetime string.
     */
    startsAt: Date;
};

/** @internal */
export namespace TimePeriod$ {
    export type Inbound = {
        ends_at: string;
        starts_at: string;
    };

    export const inboundSchema: z.ZodType<TimePeriod, z.ZodTypeDef, Inbound> = z
        .object({
            ends_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            starts_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                endsAt: v.ends_at,
                startsAt: v.starts_at,
            };
        });

    export type Outbound = {
        ends_at: string;
        starts_at: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimePeriod> = z
        .object({
            endsAt: z.date().transform((v) => v.toISOString()),
            startsAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ends_at: v.endsAt,
                starts_at: v.startsAt,
            };
        });
}
