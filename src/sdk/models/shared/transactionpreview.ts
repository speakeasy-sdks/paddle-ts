/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AddressPreview, AddressPreview$ } from "./addresspreview";
import { CurrencyCode2, CurrencyCode2$ } from "./currencycode2";
import { Price, Price$ } from "./price";
import { TransactionItemProration, TransactionItemProration$ } from "./transactionitemproration";
import {
    TransactionPreviewAdjustmentTotals,
    TransactionPreviewAdjustmentTotals$,
} from "./transactionpreviewadjustmenttotals";
import { TransactionPreviewDetails, TransactionPreviewDetails$ } from "./transactionpreviewdetails";
import { z } from "zod";

export type TransactionItemPreview = {
    /**
     * Whether this item should be included in totals for this transaction preview. Typically used to exclude one-time charges from calculations.
     */
    includeInTotals?: boolean | undefined;
    /**
     * Represents a price entity.
     */
    price?: Price | undefined;
    /**
     * Unique Paddle ID for this price, prefixed with `pri_`.
     */
    priceId?: string | undefined;
    /**
     * How proration was calculated for this item. Populated when a transaction is created from a subscription change, where `proration_billing_mode` was `prorated_immediately` or `prorated_next_billing_period`. Set automatically by Paddle.
     */
    proration?: TransactionItemProration | undefined;
    /**
     * Quantity of this item on the transaction.
     */
    quantity: number;
};

/**
 * Represents a transaction entity when previewing.
 */
export type TransactionPreview = {
    /**
     * Represents an address entity.
     */
    address?: AddressPreview | undefined;
    /**
     * Unique Paddle ID for this address entity, prefixed with `add_`.
     */
    addressId?: string | undefined;
    /**
     * Breakdown of the total for adjustments for a transaction preview in a given currency.
     */
    adjustmentsTotals?: TransactionPreviewAdjustmentTotals | undefined;
    /**
     * Unique Paddle ID for this business entity, prefixed with `biz_`.
     */
    businessId?: string | undefined;
    /**
     * Supported three-letter ISO 4217 currency code.
     */
    currencyCode?: CurrencyCode2 | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    customerId?: string | undefined;
    /**
     * IP address for this transaction preview. Send one of `address_id`, `customer_ip_address`, or the `address` object when previewing.
     */
    customerIpAddress?: string | null | undefined;
    /**
     * Calculated totals for a transaction preview, including discounts, tax, and currency conversion. Considered the source of truth for totals on a transaction preview.
     */
    details?: TransactionPreviewDetails | undefined;
    /**
     * Unique Paddle ID for this discount, prefixed with `dsc_`.
     */
    discountId?: string | undefined;
    /**
     * Whether trials should be ignored for transaction preview calculations.
     *
     * @remarks
     *
     * By default, recurring items with trials are considered to have a zero charge when previewing. Set to `true` to disable this.
     */
    ignoreTrials?: boolean | undefined;
    /**
     * List of items to preview transaction calculations for.
     */
    items: Array<TransactionItemPreview>;
};

/** @internal */
export namespace TransactionItemPreview$ {
    export type Inbound = {
        include_in_totals?: boolean | undefined;
        price?: Price$.Inbound | undefined;
        price_id?: string | undefined;
        proration?: TransactionItemProration$.Inbound | undefined;
        quantity: number;
    };

    export const inboundSchema: z.ZodType<TransactionItemPreview, z.ZodTypeDef, Inbound> = z
        .object({
            include_in_totals: z.boolean().default(true),
            price: Price$.inboundSchema.optional(),
            price_id: z.string().optional(),
            proration: TransactionItemProration$.inboundSchema.optional(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                ...(v.include_in_totals === undefined
                    ? null
                    : { includeInTotals: v.include_in_totals }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.price_id === undefined ? null : { priceId: v.price_id }),
                ...(v.proration === undefined ? null : { proration: v.proration }),
                quantity: v.quantity,
            };
        });

    export type Outbound = {
        include_in_totals: boolean;
        price?: Price$.Outbound | undefined;
        price_id?: string | undefined;
        proration?: TransactionItemProration$.Outbound | undefined;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionItemPreview> = z
        .object({
            includeInTotals: z.boolean().default(true),
            price: Price$.outboundSchema.optional(),
            priceId: z.string().optional(),
            proration: TransactionItemProration$.outboundSchema.optional(),
            quantity: z.number().int(),
        })
        .transform((v) => {
            return {
                include_in_totals: v.includeInTotals,
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceId === undefined ? null : { price_id: v.priceId }),
                ...(v.proration === undefined ? null : { proration: v.proration }),
                quantity: v.quantity,
            };
        });
}

/** @internal */
export namespace TransactionPreview$ {
    export type Inbound = {
        address?: AddressPreview$.Inbound | undefined;
        address_id?: string | undefined;
        adjustments_totals?: TransactionPreviewAdjustmentTotals$.Inbound | undefined;
        business_id?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        customer_ip_address?: string | null | undefined;
        details?: TransactionPreviewDetails$.Inbound | undefined;
        discount_id?: string | undefined;
        ignore_trials?: boolean | undefined;
        items: Array<TransactionItemPreview$.Inbound>;
    };

    export const inboundSchema: z.ZodType<TransactionPreview, z.ZodTypeDef, Inbound> = z
        .object({
            address: AddressPreview$.inboundSchema.optional(),
            address_id: z.string().optional(),
            adjustments_totals: TransactionPreviewAdjustmentTotals$.inboundSchema.optional(),
            business_id: z.string().optional(),
            currency_code: CurrencyCode2$.optional(),
            customer_id: z.string().optional(),
            customer_ip_address: z.nullable(z.string()).optional(),
            details: TransactionPreviewDetails$.inboundSchema.optional(),
            discount_id: z.string().optional(),
            ignore_trials: z.boolean().default(false),
            items: z.array(z.lazy(() => TransactionItemPreview$.inboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.address_id === undefined ? null : { addressId: v.address_id }),
                ...(v.adjustments_totals === undefined
                    ? null
                    : { adjustmentsTotals: v.adjustments_totals }),
                ...(v.business_id === undefined ? null : { businessId: v.business_id }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                ...(v.customer_id === undefined ? null : { customerId: v.customer_id }),
                ...(v.customer_ip_address === undefined
                    ? null
                    : { customerIpAddress: v.customer_ip_address }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discount_id === undefined ? null : { discountId: v.discount_id }),
                ...(v.ignore_trials === undefined ? null : { ignoreTrials: v.ignore_trials }),
                items: v.items,
            };
        });

    export type Outbound = {
        address?: AddressPreview$.Outbound | undefined;
        address_id?: string | undefined;
        adjustments_totals?: TransactionPreviewAdjustmentTotals$.Outbound | undefined;
        business_id?: string | undefined;
        currency_code?: CurrencyCode2 | undefined;
        customer_id?: string | undefined;
        customer_ip_address?: string | null | undefined;
        details?: TransactionPreviewDetails$.Outbound | undefined;
        discount_id?: string | undefined;
        ignore_trials: boolean;
        items: Array<TransactionItemPreview$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPreview> = z
        .object({
            address: AddressPreview$.outboundSchema.optional(),
            addressId: z.string().optional(),
            adjustmentsTotals: TransactionPreviewAdjustmentTotals$.outboundSchema.optional(),
            businessId: z.string().optional(),
            currencyCode: CurrencyCode2$.optional(),
            customerId: z.string().optional(),
            customerIpAddress: z.nullable(z.string()).optional(),
            details: TransactionPreviewDetails$.outboundSchema.optional(),
            discountId: z.string().optional(),
            ignoreTrials: z.boolean().default(false),
            items: z.array(z.lazy(() => TransactionItemPreview$.outboundSchema)),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addressId === undefined ? null : { address_id: v.addressId }),
                ...(v.adjustmentsTotals === undefined
                    ? null
                    : { adjustments_totals: v.adjustmentsTotals }),
                ...(v.businessId === undefined ? null : { business_id: v.businessId }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.customerId === undefined ? null : { customer_id: v.customerId }),
                ...(v.customerIpAddress === undefined
                    ? null
                    : { customer_ip_address: v.customerIpAddress }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.discountId === undefined ? null : { discount_id: v.discountId }),
                ignore_trials: v.ignoreTrials,
                items: v.items,
            };
        });
}
