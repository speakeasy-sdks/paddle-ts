/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SchemaStatus, SchemaStatus$ } from "./schemastatus";
import { z } from "zod";

/**
 * Represents a customer entity.
 */
export type CustomerInput = {
    /**
     * Email address for this entity.
     */
    email?: string | undefined;
    /**
     * Unique Paddle ID for this customer entity, prefixed with `ctm_`.
     */
    id?: string | undefined;
    /**
     * Valid IETF BCP 47 short form locale tag. If omitted, defaults to `en`.
     */
    locale?: string | undefined;
    /**
     * Full name.
     */
    name?: string | undefined;
    /**
     * Whether this entity can be used in Paddle.
     */
    status?: SchemaStatus | undefined;
};

/** @internal */
export namespace CustomerInput$ {
    export type Inbound = {
        email?: string | undefined;
        id?: string | undefined;
        locale?: string | undefined;
        name?: string | undefined;
        status?: SchemaStatus | undefined;
    };

    export const inboundSchema: z.ZodType<CustomerInput, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            id: z.string().optional(),
            locale: z.string().default("en"),
            name: z.string().optional(),
            status: SchemaStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        id?: string | undefined;
        locale: string;
        name?: string | undefined;
        status?: SchemaStatus | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomerInput> = z
        .object({
            email: z.string().optional(),
            id: z.string().optional(),
            locale: z.string().default("en"),
            name: z.string().optional(),
            status: SchemaStatus$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.id === undefined ? null : { id: v.id }),
                locale: v.locale,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}
