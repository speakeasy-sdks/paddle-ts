/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Represents an attempt to deliver a notification.
 */
export type NotificationLog = {
    /**
     * RFC 3339 datetime string.
     */
    attemptedAt?: Date | undefined;
    /**
     * Unique Paddle ID for this notification log, prefixed with `ntflog_`.
     */
    id?: string | undefined;
    /**
     * Response body sent by the responding server. Typically empty for success responses.
     */
    responseBody?: string | undefined;
    /**
     * HTTP code sent by the responding server.
     */
    responseCode?: number | undefined;
    /**
     * Content-Type sent by the responding server.
     */
    responseContentType?: string | null | undefined;
};

/** @internal */
export namespace NotificationLog$ {
    export type Inbound = {
        attempted_at?: string | undefined;
        id?: string | undefined;
        response_body?: string | undefined;
        response_code?: number | undefined;
        response_content_type?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<NotificationLog, z.ZodTypeDef, Inbound> = z
        .object({
            attempted_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string().optional(),
            response_body: z.string().optional(),
            response_code: z.number().int().optional(),
            response_content_type: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attempted_at === undefined ? null : { attemptedAt: v.attempted_at }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.response_body === undefined ? null : { responseBody: v.response_body }),
                ...(v.response_code === undefined ? null : { responseCode: v.response_code }),
                ...(v.response_content_type === undefined
                    ? null
                    : { responseContentType: v.response_content_type }),
            };
        });

    export type Outbound = {
        attempted_at?: string | undefined;
        id?: string | undefined;
        response_body?: string | undefined;
        response_code?: number | undefined;
        response_content_type?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NotificationLog> = z
        .object({
            attemptedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string().optional(),
            responseBody: z.string().optional(),
            responseCode: z.number().int().optional(),
            responseContentType: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.attemptedAt === undefined ? null : { attempted_at: v.attemptedAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.responseBody === undefined ? null : { response_body: v.responseBody }),
                ...(v.responseCode === undefined ? null : { response_code: v.responseCode }),
                ...(v.responseContentType === undefined
                    ? null
                    : { response_content_type: v.responseContentType }),
            };
        });
}
