/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ErrorCode, ErrorCode$ } from "./errorcode";
import { MethodDetails, MethodDetails$ } from "./methoddetails";
import { StatusPaymentAttempt, StatusPaymentAttempt$ } from "./statuspaymentattempt";
import { z } from "zod";

export type TransactionPaymentAttempt = {
    /**
     * Amount for collection in the lowest denomination of a currency (e.g. cents for USD).
     */
    amount?: string | undefined;
    /**
     * RFC 3339 datetime string.
     */
    capturedAt?: Date | undefined;
    /**
     * RFC 3339 datetime string of when this entity was created. Set automatically by Paddle.
     */
    createdAt?: Date | undefined;
    /**
     * Reason why a payment attempt failed. `null` if payment captured successfully.
     */
    errorCode?: ErrorCode | undefined;
    /**
     * Information about the payment method used for a payment attempt.
     */
    methodDetails?: MethodDetails | undefined;
    /**
     * UUID for this payment attempt.
     */
    paymentAttemptId?: string | undefined;
    /**
     * Status of this payment attempt.
     */
    status?: StatusPaymentAttempt | undefined;
    /**
     * UUID for the stored payment method used for this payment attempt.
     */
    storedPaymentMethodId?: string | undefined;
};

/** @internal */
export namespace TransactionPaymentAttempt$ {
    export type Inbound = {
        amount?: string | undefined;
        captured_at?: string | undefined;
        created_at?: string | undefined;
        error_code?: ErrorCode | undefined;
        method_details?: MethodDetails$.Inbound | undefined;
        payment_attempt_id?: string | undefined;
        status?: StatusPaymentAttempt | undefined;
        stored_payment_method_id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionPaymentAttempt, z.ZodTypeDef, Inbound> = z
        .object({
            amount: z.string().optional(),
            captured_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            error_code: ErrorCode$.optional(),
            method_details: MethodDetails$.inboundSchema.optional(),
            payment_attempt_id: z.string().optional(),
            status: StatusPaymentAttempt$.optional(),
            stored_payment_method_id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.captured_at === undefined ? null : { capturedAt: v.captured_at }),
                ...(v.created_at === undefined ? null : { createdAt: v.created_at }),
                ...(v.error_code === undefined ? null : { errorCode: v.error_code }),
                ...(v.method_details === undefined ? null : { methodDetails: v.method_details }),
                ...(v.payment_attempt_id === undefined
                    ? null
                    : { paymentAttemptId: v.payment_attempt_id }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.stored_payment_method_id === undefined
                    ? null
                    : { storedPaymentMethodId: v.stored_payment_method_id }),
            };
        });

    export type Outbound = {
        amount?: string | undefined;
        captured_at?: string | undefined;
        created_at?: string | undefined;
        error_code?: ErrorCode | undefined;
        method_details?: MethodDetails$.Outbound | undefined;
        payment_attempt_id?: string | undefined;
        status?: StatusPaymentAttempt | undefined;
        stored_payment_method_id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionPaymentAttempt> = z
        .object({
            amount: z.string().optional(),
            capturedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            errorCode: ErrorCode$.optional(),
            methodDetails: MethodDetails$.outboundSchema.optional(),
            paymentAttemptId: z.string().optional(),
            status: StatusPaymentAttempt$.optional(),
            storedPaymentMethodId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.capturedAt === undefined ? null : { captured_at: v.capturedAt }),
                ...(v.createdAt === undefined ? null : { created_at: v.createdAt }),
                ...(v.errorCode === undefined ? null : { error_code: v.errorCode }),
                ...(v.methodDetails === undefined ? null : { method_details: v.methodDetails }),
                ...(v.paymentAttemptId === undefined
                    ? null
                    : { payment_attempt_id: v.paymentAttemptId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.storedPaymentMethodId === undefined
                    ? null
                    : { stored_payment_method_id: v.storedPaymentMethodId }),
            };
        });
}
