/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CurrencyCodeChargeback, CurrencyCodeChargeback$ } from "./currencycodechargeback";
import { CurrencyCodePayout, CurrencyCodePayout$ } from "./currencycodepayout";
import { z } from "zod";

/**
 * Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
 */
export type TransactionPayoutTotalsAdjustedOriginal = {
    /**
     * Fee amount for this chargeback in the original currency.
     */
    amount?: string | undefined;
    /**
     * Three-letter ISO 4217 currency code for chargeback fees.
     */
    currencyCode?: CurrencyCodeChargeback | undefined;
};

/**
 * Details of any chargeback fees incurred for this transaction.
 */
export type TransactionPayoutTotalsAdjustedChargebackFee = {
    /**
     * Chargeback fee converted into the payout currency.
     */
    amount?: string | undefined;
    /**
     * Chargeback fee before conversion to the payout currency. `null` when the chargeback fee is the same as the payout currency.
     */
    original?: TransactionPayoutTotalsAdjustedOriginal | null | undefined;
};

/**
 * Breakdown of the payout total for a transaction after adjustments. `null` until the transaction is `completed`.
 */
export type TransactionPayoutTotalsAdjusted = {
    /**
     * Details of any chargeback fees incurred for this transaction.
     */
    chargebackFee?: TransactionPayoutTotalsAdjustedChargebackFee | undefined;
    /**
     * Supported three-letter ISO 4217 currency code for payouts from Paddle.
     */
    currencyCode?: CurrencyCodePayout | undefined;
    /**
     * Total earnings for this payout. This is the subtotal minus the Paddle fee.
     */
    earnings?: string | undefined;
    /**
     * Total fee taken by Paddle for this payout.
     */
    fee?: string | undefined;
    /**
     * Total before tax and fees.
     */
    subtotal?: string | undefined;
    /**
     * Total tax on the subtotal.
     */
    tax?: string | undefined;
    /**
     * Total after tax.
     */
    total?: string | undefined;
};

/** @internal */
export namespace TransactionPayoutTotalsAdjustedOriginal$ {
    export type Inbound = {
        amount?: string | undefined;
        currency_code?: CurrencyCodeChargeback | undefined;
    };

    export const inboundSchema: z.ZodType<
        TransactionPayoutTotalsAdjustedOriginal,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            amount: z.string().optional(),
            currency_code: CurrencyCodeChargeback$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
            };
        });

    export type Outbound = {
        amount?: string | undefined;
        currency_code?: CurrencyCodeChargeback | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPayoutTotalsAdjustedOriginal
    > = z
        .object({
            amount: z.string().optional(),
            currencyCode: CurrencyCodeChargeback$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
            };
        });
}

/** @internal */
export namespace TransactionPayoutTotalsAdjustedChargebackFee$ {
    export type Inbound = {
        amount?: string | undefined;
        original?: TransactionPayoutTotalsAdjustedOriginal$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<
        TransactionPayoutTotalsAdjustedChargebackFee,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            amount: z.string().optional(),
            original: z
                .nullable(z.lazy(() => TransactionPayoutTotalsAdjustedOriginal$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.original === undefined ? null : { original: v.original }),
            };
        });

    export type Outbound = {
        amount?: string | undefined;
        original?: TransactionPayoutTotalsAdjustedOriginal$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPayoutTotalsAdjustedChargebackFee
    > = z
        .object({
            amount: z.string().optional(),
            original: z
                .nullable(z.lazy(() => TransactionPayoutTotalsAdjustedOriginal$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.original === undefined ? null : { original: v.original }),
            };
        });
}

/** @internal */
export namespace TransactionPayoutTotalsAdjusted$ {
    export type Inbound = {
        chargeback_fee?: TransactionPayoutTotalsAdjustedChargebackFee$.Inbound | undefined;
        currency_code?: CurrencyCodePayout | undefined;
        earnings?: string | undefined;
        fee?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TransactionPayoutTotalsAdjusted, z.ZodTypeDef, Inbound> =
        z
            .object({
                chargeback_fee: z
                    .lazy(() => TransactionPayoutTotalsAdjustedChargebackFee$.inboundSchema)
                    .optional(),
                currency_code: CurrencyCodePayout$.optional(),
                earnings: z.string().optional(),
                fee: z.string().optional(),
                subtotal: z.string().optional(),
                tax: z.string().optional(),
                total: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.chargeback_fee === undefined
                        ? null
                        : { chargebackFee: v.chargeback_fee }),
                    ...(v.currency_code === undefined ? null : { currencyCode: v.currency_code }),
                    ...(v.earnings === undefined ? null : { earnings: v.earnings }),
                    ...(v.fee === undefined ? null : { fee: v.fee }),
                    ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                    ...(v.tax === undefined ? null : { tax: v.tax }),
                    ...(v.total === undefined ? null : { total: v.total }),
                };
            });

    export type Outbound = {
        chargeback_fee?: TransactionPayoutTotalsAdjustedChargebackFee$.Outbound | undefined;
        currency_code?: CurrencyCodePayout | undefined;
        earnings?: string | undefined;
        fee?: string | undefined;
        subtotal?: string | undefined;
        tax?: string | undefined;
        total?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPayoutTotalsAdjusted
    > = z
        .object({
            chargebackFee: z
                .lazy(() => TransactionPayoutTotalsAdjustedChargebackFee$.outboundSchema)
                .optional(),
            currencyCode: CurrencyCodePayout$.optional(),
            earnings: z.string().optional(),
            fee: z.string().optional(),
            subtotal: z.string().optional(),
            tax: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.chargebackFee === undefined ? null : { chargeback_fee: v.chargebackFee }),
                ...(v.currencyCode === undefined ? null : { currency_code: v.currencyCode }),
                ...(v.earnings === undefined ? null : { earnings: v.earnings }),
                ...(v.fee === undefined ? null : { fee: v.fee }),
                ...(v.subtotal === undefined ? null : { subtotal: v.subtotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
