/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MoneyInvoice, MoneyInvoice$ } from "./moneyinvoice";
import { z } from "zod";

/**
 * The price of the product in the item
 *
 * @remarks
 *
 */
export type InvoiceItemPrice = {
    productId: string;
    /**
     * Represents an amount in a particular currency.
     */
    unitPrice: MoneyInvoice;
};

export type InvoiceItem = {
    /**
     * The price of the product in the item
     *
     * @remarks
     *
     */
    price?: InvoiceItemPrice | undefined;
    /**
     * Quantity of the product in the item, greater than 0
     */
    quantity?: number | undefined;
};

/** @internal */
export namespace InvoiceItemPrice$ {
    export type Inbound = {
        product_id: string;
        unit_price: MoneyInvoice$.Inbound;
    };

    export const inboundSchema: z.ZodType<InvoiceItemPrice, z.ZodTypeDef, Inbound> = z
        .object({
            product_id: z.string(),
            unit_price: MoneyInvoice$.inboundSchema,
        })
        .transform((v) => {
            return {
                productId: v.product_id,
                unitPrice: v.unit_price,
            };
        });

    export type Outbound = {
        product_id: string;
        unit_price: MoneyInvoice$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceItemPrice> = z
        .object({
            productId: z.string(),
            unitPrice: MoneyInvoice$.outboundSchema,
        })
        .transform((v) => {
            return {
                product_id: v.productId,
                unit_price: v.unitPrice,
            };
        });
}

/** @internal */
export namespace InvoiceItem$ {
    export type Inbound = {
        price?: InvoiceItemPrice$.Inbound | undefined;
        quantity?: number | undefined;
    };

    export const inboundSchema: z.ZodType<InvoiceItem, z.ZodTypeDef, Inbound> = z
        .object({
            price: z.lazy(() => InvoiceItemPrice$.inboundSchema).optional(),
            quantity: z.number().int().default(1),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
            };
        });

    export type Outbound = {
        price?: InvoiceItemPrice$.Outbound | undefined;
        quantity: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceItem> = z
        .object({
            price: z.lazy(() => InvoiceItemPrice$.outboundSchema).optional(),
            quantity: z.number().int().default(1),
        })
        .transform((v) => {
            return {
                ...(v.price === undefined ? null : { price: v.price }),
                quantity: v.quantity,
            };
        });
}
