/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Discount, Discount$ } from "./discount";
import { z } from "zod";

/**
 * Array of discounts applied to this preview line item. Empty if no discounts applied.
 */
export type TransactionPricingPreviewLineItemDiscount = {
    /**
     * Represents a discount entity.
     */
    discount?: Discount | undefined;
    /**
     * Total amount discounted as a result of this discount in the format of a given currency. '
     */
    formattedTotal?: string | undefined;
    /**
     * Total amount discounted as a result of this discount.
     */
    total?: string | undefined;
};

/** @internal */
export namespace TransactionPricingPreviewLineItemDiscount$ {
    export type Inbound = {
        discount?: Discount$.Inbound | undefined;
        formatted_total?: string | undefined;
        total?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        TransactionPricingPreviewLineItemDiscount,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            discount: Discount$.inboundSchema.optional(),
            formatted_total: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.formatted_total === undefined ? null : { formattedTotal: v.formatted_total }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });

    export type Outbound = {
        discount?: Discount$.Outbound | undefined;
        formatted_total?: string | undefined;
        total?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        TransactionPricingPreviewLineItemDiscount
    > = z
        .object({
            discount: Discount$.outboundSchema.optional(),
            formattedTotal: z.string().optional(),
            total: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.discount === undefined ? null : { discount: v.discount }),
                ...(v.formattedTotal === undefined ? null : { formatted_total: v.formattedTotal }),
                ...(v.total === undefined ? null : { total: v.total }),
            };
        });
}
